// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AVChannelSetupRequestMessage.proto

#include "AVChannelSetupRequestMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace messages {
constexpr AVChannelSetupRequest::AVChannelSetupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_index_(0u){}
struct AVChannelSetupRequestDefaultTypeInternal {
  constexpr AVChannelSetupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AVChannelSetupRequestDefaultTypeInternal() {}
  union {
    AVChannelSetupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AVChannelSetupRequestDefaultTypeInternal _AVChannelSetupRequest_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AVChannelSetupRequestMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AVChannelSetupRequestMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AVChannelSetupRequestMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AVChannelSetupRequestMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::AVChannelSetupRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::AVChannelSetupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::AVChannelSetupRequest, config_index_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::aasdk::proto::messages::AVChannelSetupRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::messages::_AVChannelSetupRequest_default_instance_),
};

const char descriptor_table_protodef_AVChannelSetupRequestMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"AVChannelSetupRequestMessage.proto\022\024aa"
  "sdk.proto.messages\"-\n\025AVChannelSetupRequ"
  "est\022\024\n\014config_index\030\001 \002(\r"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AVChannelSetupRequestMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AVChannelSetupRequestMessage_2eproto = {
  false, false, 105, descriptor_table_protodef_AVChannelSetupRequestMessage_2eproto, "AVChannelSetupRequestMessage.proto", 
  &descriptor_table_AVChannelSetupRequestMessage_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_AVChannelSetupRequestMessage_2eproto::offsets,
  file_level_metadata_AVChannelSetupRequestMessage_2eproto, file_level_enum_descriptors_AVChannelSetupRequestMessage_2eproto, file_level_service_descriptors_AVChannelSetupRequestMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_AVChannelSetupRequestMessage_2eproto_getter() {
  return &descriptor_table_AVChannelSetupRequestMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_AVChannelSetupRequestMessage_2eproto(&descriptor_table_AVChannelSetupRequestMessage_2eproto);
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class AVChannelSetupRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AVChannelSetupRequest>()._has_bits_);
  static void set_has_config_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AVChannelSetupRequest::AVChannelSetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.messages.AVChannelSetupRequest)
}
AVChannelSetupRequest::AVChannelSetupRequest(const AVChannelSetupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_index_ = from.config_index_;
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.messages.AVChannelSetupRequest)
}

void AVChannelSetupRequest::SharedCtor() {
config_index_ = 0u;
}

AVChannelSetupRequest::~AVChannelSetupRequest() {
  // @@protoc_insertion_point(destructor:aasdk.proto.messages.AVChannelSetupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AVChannelSetupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AVChannelSetupRequest::ArenaDtor(void* object) {
  AVChannelSetupRequest* _this = reinterpret_cast< AVChannelSetupRequest* >(object);
  (void)_this;
}
void AVChannelSetupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AVChannelSetupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AVChannelSetupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.messages.AVChannelSetupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AVChannelSetupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 config_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_config_index(&has_bits);
          config_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AVChannelSetupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.messages.AVChannelSetupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 config_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_config_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.messages.AVChannelSetupRequest)
  return target;
}

size_t AVChannelSetupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.messages.AVChannelSetupRequest)
  size_t total_size = 0;

  // required uint32 config_index = 1;
  if (_internal_has_config_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_config_index());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AVChannelSetupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aasdk.proto.messages.AVChannelSetupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AVChannelSetupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AVChannelSetupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aasdk.proto.messages.AVChannelSetupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aasdk.proto.messages.AVChannelSetupRequest)
    MergeFrom(*source);
  }
}

void AVChannelSetupRequest::MergeFrom(const AVChannelSetupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.messages.AVChannelSetupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config_index()) {
    _internal_set_config_index(from._internal_config_index());
  }
}

void AVChannelSetupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aasdk.proto.messages.AVChannelSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVChannelSetupRequest::CopyFrom(const AVChannelSetupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.messages.AVChannelSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVChannelSetupRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AVChannelSetupRequest::InternalSwap(AVChannelSetupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(config_index_, other->config_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AVChannelSetupRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AVChannelSetupRequestMessage_2eproto_getter, &descriptor_table_AVChannelSetupRequestMessage_2eproto_once,
      file_level_metadata_AVChannelSetupRequestMessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::messages::AVChannelSetupRequest* Arena::CreateMaybeMessage< ::aasdk::proto::messages::AVChannelSetupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::messages::AVChannelSetupRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
