// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TouchEventData.proto

#include "TouchEventData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace data {
constexpr TouchEvent::TouchEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : touch_location_()
  , action_index_(0u)
  , touch_action_(0)
{}
struct TouchEventDefaultTypeInternal {
  constexpr TouchEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TouchEventDefaultTypeInternal() {}
  union {
    TouchEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TouchEventDefaultTypeInternal _TouchEvent_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TouchEventData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TouchEventData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TouchEventData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TouchEventData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::TouchEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::TouchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::TouchEvent, touch_location_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::TouchEvent, action_index_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::TouchEvent, touch_action_),
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::aasdk::proto::data::TouchEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::data::_TouchEvent_default_instance_),
};

const char descriptor_table_protodef_TouchEventData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024TouchEventData.proto\022\020aasdk.proto.data"
  "\032\027TouchLocationData.proto\032\025TouchActionEn"
  "um.proto\"\226\001\n\nTouchEvent\0227\n\016touch_locatio"
  "n\030\001 \003(\0132\037.aasdk.proto.data.TouchLocation"
  "\022\024\n\014action_index\030\002 \001(\r\0229\n\014touch_action\030\003"
  " \002(\0162#.aasdk.proto.enums.TouchAction.Enu"
  "m"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TouchEventData_2eproto_deps[2] = {
  &::descriptor_table_TouchActionEnum_2eproto,
  &::descriptor_table_TouchLocationData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TouchEventData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TouchEventData_2eproto = {
  false, false, 241, descriptor_table_protodef_TouchEventData_2eproto, "TouchEventData.proto", 
  &descriptor_table_TouchEventData_2eproto_once, descriptor_table_TouchEventData_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_TouchEventData_2eproto::offsets,
  file_level_metadata_TouchEventData_2eproto, file_level_enum_descriptors_TouchEventData_2eproto, file_level_service_descriptors_TouchEventData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TouchEventData_2eproto_getter() {
  return &descriptor_table_TouchEventData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TouchEventData_2eproto(&descriptor_table_TouchEventData_2eproto);
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class TouchEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TouchEvent>()._has_bits_);
  static void set_has_action_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_touch_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void TouchEvent::clear_touch_location() {
  touch_location_.Clear();
}
TouchEvent::TouchEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  touch_location_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.data.TouchEvent)
}
TouchEvent::TouchEvent(const TouchEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      touch_location_(from.touch_location_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_index_, &from.action_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&touch_action_) -
    reinterpret_cast<char*>(&action_index_)) + sizeof(touch_action_));
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.data.TouchEvent)
}

inline void TouchEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&touch_action_) -
    reinterpret_cast<char*>(&action_index_)) + sizeof(touch_action_));
}

TouchEvent::~TouchEvent() {
  // @@protoc_insertion_point(destructor:aasdk.proto.data.TouchEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TouchEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TouchEvent::ArenaDtor(void* object) {
  TouchEvent* _this = reinterpret_cast< TouchEvent* >(object);
  (void)_this;
}
void TouchEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TouchEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TouchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.data.TouchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  touch_location_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&action_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&touch_action_) -
        reinterpret_cast<char*>(&action_index_)) + sizeof(touch_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TouchEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aasdk.proto.data.TouchLocation touch_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_touch_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 action_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_action_index(&has_bits);
          action_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .aasdk.proto.enums.TouchAction.Enum touch_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aasdk::proto::enums::TouchAction_Enum_IsValid(val))) {
            _internal_set_touch_action(static_cast<::aasdk::proto::enums::TouchAction_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TouchEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.data.TouchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aasdk.proto.data.TouchLocation touch_location = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_touch_location_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_touch_location(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_action_index(), target);
  }

  // required .aasdk.proto.enums.TouchAction.Enum touch_action = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_touch_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.data.TouchEvent)
  return target;
}

size_t TouchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.data.TouchEvent)
  size_t total_size = 0;

  // required .aasdk.proto.enums.TouchAction.Enum touch_action = 3;
  if (_internal_has_touch_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_touch_action());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aasdk.proto.data.TouchLocation touch_location = 1;
  total_size += 1UL * this->_internal_touch_location_size();
  for (const auto& msg : this->touch_location_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 action_index = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_action_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TouchEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TouchEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TouchEvent::GetClassData() const { return &_class_data_; }

void TouchEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TouchEvent *>(to)->MergeFrom(
      static_cast<const TouchEvent &>(from));
}


void TouchEvent::MergeFrom(const TouchEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.data.TouchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  touch_location_.MergeFrom(from.touch_location_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      action_index_ = from.action_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      touch_action_ = from.touch_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TouchEvent::CopyFrom(const TouchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.data.TouchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(touch_location_)) return false;
  return true;
}

void TouchEvent::InternalSwap(TouchEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  touch_location_.InternalSwap(&other->touch_location_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TouchEvent, touch_action_)
      + sizeof(TouchEvent::touch_action_)
      - PROTOBUF_FIELD_OFFSET(TouchEvent, action_index_)>(
          reinterpret_cast<char*>(&action_index_),
          reinterpret_cast<char*>(&other->action_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TouchEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TouchEventData_2eproto_getter, &descriptor_table_TouchEventData_2eproto_once,
      file_level_metadata_TouchEventData_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::data::TouchEvent* Arena::CreateMaybeMessage< ::aasdk::proto::data::TouchEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::data::TouchEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
