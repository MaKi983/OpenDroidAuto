// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BluetoothChannelData.proto

#include "BluetoothChannelData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace data {
constexpr BluetoothChannel::BluetoothChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : supported_pairing_methods_()
  , adapter_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BluetoothChannelDefaultTypeInternal {
  constexpr BluetoothChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BluetoothChannelDefaultTypeInternal() {}
  union {
    BluetoothChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BluetoothChannelDefaultTypeInternal _BluetoothChannel_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_BluetoothChannelData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_BluetoothChannelData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_BluetoothChannelData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_BluetoothChannelData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::BluetoothChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::BluetoothChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::BluetoothChannel, adapter_address_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::BluetoothChannel, supported_pairing_methods_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::aasdk::proto::data::BluetoothChannel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::data::_BluetoothChannel_default_instance_),
};

const char descriptor_table_protodef_BluetoothChannelData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032BluetoothChannelData.proto\022\020aasdk.prot"
  "o.data\032 BluetoothPairingMethodEnum.proto"
  "\"~\n\020BluetoothChannel\022\027\n\017adapter_address\030"
  "\001 \002(\t\022Q\n\031supported_pairing_methods\030\002 \003(\016"
  "2..aasdk.proto.enums.BluetoothPairingMet"
  "hod.Enum"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_BluetoothChannelData_2eproto_deps[1] = {
  &::descriptor_table_BluetoothPairingMethodEnum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_BluetoothChannelData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BluetoothChannelData_2eproto = {
  false, false, 208, descriptor_table_protodef_BluetoothChannelData_2eproto, "BluetoothChannelData.proto", 
  &descriptor_table_BluetoothChannelData_2eproto_once, descriptor_table_BluetoothChannelData_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_BluetoothChannelData_2eproto::offsets,
  file_level_metadata_BluetoothChannelData_2eproto, file_level_enum_descriptors_BluetoothChannelData_2eproto, file_level_service_descriptors_BluetoothChannelData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_BluetoothChannelData_2eproto_getter() {
  return &descriptor_table_BluetoothChannelData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_BluetoothChannelData_2eproto(&descriptor_table_BluetoothChannelData_2eproto);
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class BluetoothChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<BluetoothChannel>()._has_bits_);
  static void set_has_adapter_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

BluetoothChannel::BluetoothChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  supported_pairing_methods_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.data.BluetoothChannel)
}
BluetoothChannel::BluetoothChannel(const BluetoothChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      supported_pairing_methods_(from.supported_pairing_methods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  adapter_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_adapter_address()) {
    adapter_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_adapter_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.data.BluetoothChannel)
}

inline void BluetoothChannel::SharedCtor() {
adapter_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BluetoothChannel::~BluetoothChannel() {
  // @@protoc_insertion_point(destructor:aasdk.proto.data.BluetoothChannel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BluetoothChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  adapter_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothChannel::ArenaDtor(void* object) {
  BluetoothChannel* _this = reinterpret_cast< BluetoothChannel* >(object);
  (void)_this;
}
void BluetoothChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BluetoothChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.data.BluetoothChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_pairing_methods_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    adapter_address_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BluetoothChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string adapter_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_adapter_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aasdk.proto.data.BluetoothChannel.adapter_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.enums.BluetoothPairingMethod.Enum supported_pairing_methods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::aasdk::proto::enums::BluetoothPairingMethod_Enum_IsValid(val))) {
              _internal_add_supported_pairing_methods(static_cast<::aasdk::proto::enums::BluetoothPairingMethod_Enum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_supported_pairing_methods(), ptr, ctx, ::aasdk::proto::enums::BluetoothPairingMethod_Enum_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.data.BluetoothChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string adapter_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_adapter_address().data(), static_cast<int>(this->_internal_adapter_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aasdk.proto.data.BluetoothChannel.adapter_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_adapter_address(), target);
  }

  // repeated .aasdk.proto.enums.BluetoothPairingMethod.Enum supported_pairing_methods = 2;
  for (int i = 0, n = this->_internal_supported_pairing_methods_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_supported_pairing_methods(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.data.BluetoothChannel)
  return target;
}

size_t BluetoothChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.data.BluetoothChannel)
  size_t total_size = 0;

  // required string adapter_address = 1;
  if (_internal_has_adapter_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_adapter_address());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aasdk.proto.enums.BluetoothPairingMethod.Enum supported_pairing_methods = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_pairing_methods_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_supported_pairing_methods(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BluetoothChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BluetoothChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BluetoothChannel::GetClassData() const { return &_class_data_; }

void BluetoothChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BluetoothChannel *>(to)->MergeFrom(
      static_cast<const BluetoothChannel &>(from));
}


void BluetoothChannel::MergeFrom(const BluetoothChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.data.BluetoothChannel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_pairing_methods_.MergeFrom(from.supported_pairing_methods_);
  if (from._internal_has_adapter_address()) {
    _internal_set_adapter_address(from._internal_adapter_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BluetoothChannel::CopyFrom(const BluetoothChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.data.BluetoothChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothChannel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BluetoothChannel::InternalSwap(BluetoothChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  supported_pairing_methods_.InternalSwap(&other->supported_pairing_methods_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &adapter_address_, GetArenaForAllocation(),
      &other->adapter_address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothChannel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_BluetoothChannelData_2eproto_getter, &descriptor_table_BluetoothChannelData_2eproto_once,
      file_level_metadata_BluetoothChannelData_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::data::BluetoothChannel* Arena::CreateMaybeMessage< ::aasdk::proto::data::BluetoothChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::data::BluetoothChannel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
