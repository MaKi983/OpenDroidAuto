// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoConfigData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VideoConfigData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VideoConfigData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "VideoResolutionEnum.pb.h"
#include "VideoFPSEnum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VideoConfigData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VideoConfigData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VideoConfigData_2eproto;
namespace aasdk {
namespace proto {
namespace data {
class VideoConfig;
struct VideoConfigDefaultTypeInternal;
extern VideoConfigDefaultTypeInternal _VideoConfig_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> ::aasdk::proto::data::VideoConfig* Arena::CreateMaybeMessage<::aasdk::proto::data::VideoConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class VideoConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aasdk.proto.data.VideoConfig) */ {
 public:
  inline VideoConfig() : VideoConfig(nullptr) {}
  ~VideoConfig() override;
  explicit constexpr VideoConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoConfig(const VideoConfig& from);
  VideoConfig(VideoConfig&& from) noexcept
    : VideoConfig() {
    *this = ::std::move(from);
  }

  inline VideoConfig& operator=(const VideoConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoConfig& operator=(VideoConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoConfig* internal_default_instance() {
    return reinterpret_cast<const VideoConfig*>(
               &_VideoConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VideoConfig& a, VideoConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoConfig* New() const final {
    return new VideoConfig();
  }

  VideoConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoConfig& from);
  void MergeFrom(const VideoConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aasdk.proto.data.VideoConfig";
  }
  protected:
  explicit VideoConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoResolutionFieldNumber = 1,
    kVideoFpsFieldNumber = 2,
    kMarginWidthFieldNumber = 3,
    kMarginHeightFieldNumber = 4,
    kDpiFieldNumber = 5,
    kAdditionalDepthFieldNumber = 6,
  };
  // required .aasdk.proto.enums.VideoResolution.Enum video_resolution = 1;
  bool has_video_resolution() const;
  private:
  bool _internal_has_video_resolution() const;
  public:
  void clear_video_resolution();
  ::aasdk::proto::enums::VideoResolution_Enum video_resolution() const;
  void set_video_resolution(::aasdk::proto::enums::VideoResolution_Enum value);
  private:
  ::aasdk::proto::enums::VideoResolution_Enum _internal_video_resolution() const;
  void _internal_set_video_resolution(::aasdk::proto::enums::VideoResolution_Enum value);
  public:

  // required .aasdk.proto.enums.VideoFPS.Enum video_fps = 2;
  bool has_video_fps() const;
  private:
  bool _internal_has_video_fps() const;
  public:
  void clear_video_fps();
  ::aasdk::proto::enums::VideoFPS_Enum video_fps() const;
  void set_video_fps(::aasdk::proto::enums::VideoFPS_Enum value);
  private:
  ::aasdk::proto::enums::VideoFPS_Enum _internal_video_fps() const;
  void _internal_set_video_fps(::aasdk::proto::enums::VideoFPS_Enum value);
  public:

  // required uint32 margin_width = 3;
  bool has_margin_width() const;
  private:
  bool _internal_has_margin_width() const;
  public:
  void clear_margin_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 margin_width() const;
  void set_margin_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_margin_width() const;
  void _internal_set_margin_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 margin_height = 4;
  bool has_margin_height() const;
  private:
  bool _internal_has_margin_height() const;
  public:
  void clear_margin_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 margin_height() const;
  void set_margin_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_margin_height() const;
  void _internal_set_margin_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 dpi = 5;
  bool has_dpi() const;
  private:
  bool _internal_has_dpi() const;
  public:
  void clear_dpi();
  ::PROTOBUF_NAMESPACE_ID::uint32 dpi() const;
  void set_dpi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dpi() const;
  void _internal_set_dpi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 additional_depth = 6;
  bool has_additional_depth() const;
  private:
  bool _internal_has_additional_depth() const;
  public:
  void clear_additional_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_depth() const;
  void set_additional_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_additional_depth() const;
  void _internal_set_additional_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aasdk.proto.data.VideoConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int video_resolution_;
  int video_fps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 margin_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 margin_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dpi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_depth_;
  friend struct ::TableStruct_VideoConfigData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VideoConfig

// required .aasdk.proto.enums.VideoResolution.Enum video_resolution = 1;
inline bool VideoConfig::_internal_has_video_resolution() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VideoConfig::has_video_resolution() const {
  return _internal_has_video_resolution();
}
inline void VideoConfig::clear_video_resolution() {
  video_resolution_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::aasdk::proto::enums::VideoResolution_Enum VideoConfig::_internal_video_resolution() const {
  return static_cast< ::aasdk::proto::enums::VideoResolution_Enum >(video_resolution_);
}
inline ::aasdk::proto::enums::VideoResolution_Enum VideoConfig::video_resolution() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.VideoConfig.video_resolution)
  return _internal_video_resolution();
}
inline void VideoConfig::_internal_set_video_resolution(::aasdk::proto::enums::VideoResolution_Enum value) {
  assert(::aasdk::proto::enums::VideoResolution_Enum_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  video_resolution_ = value;
}
inline void VideoConfig::set_video_resolution(::aasdk::proto::enums::VideoResolution_Enum value) {
  _internal_set_video_resolution(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.data.VideoConfig.video_resolution)
}

// required .aasdk.proto.enums.VideoFPS.Enum video_fps = 2;
inline bool VideoConfig::_internal_has_video_fps() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VideoConfig::has_video_fps() const {
  return _internal_has_video_fps();
}
inline void VideoConfig::clear_video_fps() {
  video_fps_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::aasdk::proto::enums::VideoFPS_Enum VideoConfig::_internal_video_fps() const {
  return static_cast< ::aasdk::proto::enums::VideoFPS_Enum >(video_fps_);
}
inline ::aasdk::proto::enums::VideoFPS_Enum VideoConfig::video_fps() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.VideoConfig.video_fps)
  return _internal_video_fps();
}
inline void VideoConfig::_internal_set_video_fps(::aasdk::proto::enums::VideoFPS_Enum value) {
  assert(::aasdk::proto::enums::VideoFPS_Enum_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  video_fps_ = value;
}
inline void VideoConfig::set_video_fps(::aasdk::proto::enums::VideoFPS_Enum value) {
  _internal_set_video_fps(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.data.VideoConfig.video_fps)
}

// required uint32 margin_width = 3;
inline bool VideoConfig::_internal_has_margin_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VideoConfig::has_margin_width() const {
  return _internal_has_margin_width();
}
inline void VideoConfig::clear_margin_width() {
  margin_width_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoConfig::_internal_margin_width() const {
  return margin_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoConfig::margin_width() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.VideoConfig.margin_width)
  return _internal_margin_width();
}
inline void VideoConfig::_internal_set_margin_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  margin_width_ = value;
}
inline void VideoConfig::set_margin_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_margin_width(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.data.VideoConfig.margin_width)
}

// required uint32 margin_height = 4;
inline bool VideoConfig::_internal_has_margin_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VideoConfig::has_margin_height() const {
  return _internal_has_margin_height();
}
inline void VideoConfig::clear_margin_height() {
  margin_height_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoConfig::_internal_margin_height() const {
  return margin_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoConfig::margin_height() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.VideoConfig.margin_height)
  return _internal_margin_height();
}
inline void VideoConfig::_internal_set_margin_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  margin_height_ = value;
}
inline void VideoConfig::set_margin_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_margin_height(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.data.VideoConfig.margin_height)
}

// required uint32 dpi = 5;
inline bool VideoConfig::_internal_has_dpi() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VideoConfig::has_dpi() const {
  return _internal_has_dpi();
}
inline void VideoConfig::clear_dpi() {
  dpi_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoConfig::_internal_dpi() const {
  return dpi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoConfig::dpi() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.VideoConfig.dpi)
  return _internal_dpi();
}
inline void VideoConfig::_internal_set_dpi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  dpi_ = value;
}
inline void VideoConfig::set_dpi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dpi(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.data.VideoConfig.dpi)
}

// optional uint32 additional_depth = 6;
inline bool VideoConfig::_internal_has_additional_depth() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VideoConfig::has_additional_depth() const {
  return _internal_has_additional_depth();
}
inline void VideoConfig::clear_additional_depth() {
  additional_depth_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoConfig::_internal_additional_depth() const {
  return additional_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoConfig::additional_depth() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.VideoConfig.additional_depth)
  return _internal_additional_depth();
}
inline void VideoConfig::_internal_set_additional_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  additional_depth_ = value;
}
inline void VideoConfig::set_additional_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_additional_depth(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.data.VideoConfig.additional_depth)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace aasdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VideoConfigData_2eproto
