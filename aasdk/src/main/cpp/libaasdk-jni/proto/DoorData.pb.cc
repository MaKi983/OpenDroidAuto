// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DoorData.proto

#include "DoorData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace data {
constexpr Door::Door(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : door_open_()
  , hood_open_(false)
  , boot_open_(false){}
struct DoorDefaultTypeInternal {
  constexpr DoorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DoorDefaultTypeInternal() {}
  union {
    Door _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DoorDefaultTypeInternal _Door_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DoorData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_DoorData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DoorData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DoorData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::Door, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::Door, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::Door, hood_open_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::Door, boot_open_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::Door, door_open_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::aasdk::proto::data::Door)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::data::_Door_default_instance_),
};

const char descriptor_table_protodef_DoorData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016DoorData.proto\022\020aasdk.proto.data\"\?\n\004Do"
  "or\022\021\n\thood_open\030\001 \002(\010\022\021\n\tboot_open\030\002 \002(\010"
  "\022\021\n\tdoor_open\030\003 \003(\010"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DoorData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DoorData_2eproto = {
  false, false, 99, descriptor_table_protodef_DoorData_2eproto, "DoorData.proto", 
  &descriptor_table_DoorData_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_DoorData_2eproto::offsets,
  file_level_metadata_DoorData_2eproto, file_level_enum_descriptors_DoorData_2eproto, file_level_service_descriptors_DoorData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_DoorData_2eproto_getter() {
  return &descriptor_table_DoorData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_DoorData_2eproto(&descriptor_table_DoorData_2eproto);
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class Door::_Internal {
 public:
  using HasBits = decltype(std::declval<Door>()._has_bits_);
  static void set_has_hood_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_boot_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Door::Door(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  door_open_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.data.Door)
}
Door::Door(const Door& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      door_open_(from.door_open_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hood_open_, &from.hood_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&boot_open_) -
    reinterpret_cast<char*>(&hood_open_)) + sizeof(boot_open_));
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.data.Door)
}

inline void Door::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hood_open_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&boot_open_) -
    reinterpret_cast<char*>(&hood_open_)) + sizeof(boot_open_));
}

Door::~Door() {
  // @@protoc_insertion_point(destructor:aasdk.proto.data.Door)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Door::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Door::ArenaDtor(void* object) {
  Door* _this = reinterpret_cast< Door* >(object);
  (void)_this;
}
void Door::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Door::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Door::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.data.Door)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  door_open_.Clear();
  ::memset(&hood_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boot_open_) -
      reinterpret_cast<char*>(&hood_open_)) + sizeof(boot_open_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Door::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool hood_open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hood_open(&has_bits);
          hood_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool boot_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_boot_open(&has_bits);
          boot_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool door_open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_door_open(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_door_open(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Door::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.data.Door)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool hood_open = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hood_open(), target);
  }

  // required bool boot_open = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_boot_open(), target);
  }

  // repeated bool door_open = 3;
  for (int i = 0, n = this->_internal_door_open_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_door_open(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.data.Door)
  return target;
}

size_t Door::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aasdk.proto.data.Door)
  size_t total_size = 0;

  if (_internal_has_hood_open()) {
    // required bool hood_open = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_boot_open()) {
    // required bool boot_open = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Door::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.data.Door)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool hood_open = 1;
    total_size += 1 + 1;

    // required bool boot_open = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool door_open = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_door_open_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_door_open_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Door::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Door::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Door::GetClassData() const { return &_class_data_; }

void Door::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Door *>(to)->MergeFrom(
      static_cast<const Door &>(from));
}


void Door::MergeFrom(const Door& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.data.Door)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  door_open_.MergeFrom(from.door_open_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hood_open_ = from.hood_open_;
    }
    if (cached_has_bits & 0x00000002u) {
      boot_open_ = from.boot_open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Door::CopyFrom(const Door& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.data.Door)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Door::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Door::InternalSwap(Door* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  door_open_.InternalSwap(&other->door_open_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Door, boot_open_)
      + sizeof(Door::boot_open_)
      - PROTOBUF_FIELD_OFFSET(Door, hood_open_)>(
          reinterpret_cast<char*>(&hood_open_),
          reinterpret_cast<char*>(&other->hood_open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Door::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DoorData_2eproto_getter, &descriptor_table_DoorData_2eproto_once,
      file_level_metadata_DoorData_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::data::Door* Arena::CreateMaybeMessage< ::aasdk::proto::data::Door >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::data::Door >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
