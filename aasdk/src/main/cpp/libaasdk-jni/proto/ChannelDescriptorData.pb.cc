// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChannelDescriptorData.proto

#include "ChannelDescriptorData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace data {
constexpr ChannelDescriptor::ChannelDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sensor_channel_(nullptr)
  , av_channel_(nullptr)
  , input_channel_(nullptr)
  , av_input_channel_(nullptr)
  , bluetooth_channel_(nullptr)
  , navigation_channel_(nullptr)
  , media_infochannel_(nullptr)
  , vendor_extension_channel_(nullptr)
  , wifi_channel_(nullptr)
  , channel_id_(0u){}
struct ChannelDescriptorDefaultTypeInternal {
  constexpr ChannelDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelDescriptorDefaultTypeInternal() {}
  union {
    ChannelDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelDescriptorDefaultTypeInternal _ChannelDescriptor_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ChannelDescriptorData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ChannelDescriptorData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ChannelDescriptorData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ChannelDescriptorData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, channel_id_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, sensor_channel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, av_channel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, input_channel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, av_input_channel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, bluetooth_channel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, navigation_channel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, media_infochannel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, vendor_extension_channel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::data::ChannelDescriptor, wifi_channel_),
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::aasdk::proto::data::ChannelDescriptor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::data::_ChannelDescriptor_default_instance_),
};

const char descriptor_table_protodef_ChannelDescriptorData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033ChannelDescriptorData.proto\022\020aasdk.pro"
  "to.data\032\027SensorChannelData.proto\032\023AVChan"
  "nelData.proto\032\026InputChannelData.proto\032\030A"
  "VInputChannelData.proto\032\032BluetoothChanne"
  "lData.proto\032\033NavigationChannelData.proto"
  "\032 VendorExtensionChannelData.proto\032\032Medi"
  "aInfoChannelData.proto\032\025WifiChannelData."
  "proto\"\304\004\n\021ChannelDescriptor\022\022\n\nchannel_i"
  "d\030\001 \002(\r\0227\n\016sensor_channel\030\002 \001(\0132\037.aasdk."
  "proto.data.SensorChannel\022/\n\nav_channel\030\003"
  " \001(\0132\033.aasdk.proto.data.AVChannel\0225\n\rinp"
  "ut_channel\030\004 \001(\0132\036.aasdk.proto.data.Inpu"
  "tChannel\022:\n\020av_input_channel\030\005 \001(\0132 .aas"
  "dk.proto.data.AVInputChannel\022=\n\021bluetoot"
  "h_channel\030\006 \001(\0132\".aasdk.proto.data.Bluet"
  "oothChannel\022\?\n\022navigation_channel\030\010 \001(\0132"
  "#.aasdk.proto.data.NavigationChannel\022=\n\021"
  "media_infoChannel\030\t \001(\0132\".aasdk.proto.da"
  "ta.MediaInfoChannel\022J\n\030vendor_extension_"
  "channel\030\014 \001(\0132(.aasdk.proto.data.VendorE"
  "xtensionChannel\0223\n\014wifi_channel\030\020 \001(\0132\035."
  "aasdk.proto.data.WifiChannelB\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ChannelDescriptorData_2eproto_deps[9] = {
  &::descriptor_table_AVChannelData_2eproto,
  &::descriptor_table_AVInputChannelData_2eproto,
  &::descriptor_table_BluetoothChannelData_2eproto,
  &::descriptor_table_InputChannelData_2eproto,
  &::descriptor_table_MediaInfoChannelData_2eproto,
  &::descriptor_table_NavigationChannelData_2eproto,
  &::descriptor_table_SensorChannelData_2eproto,
  &::descriptor_table_VendorExtensionChannelData_2eproto,
  &::descriptor_table_WifiChannelData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ChannelDescriptorData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChannelDescriptorData_2eproto = {
  false, false, 872, descriptor_table_protodef_ChannelDescriptorData_2eproto, "ChannelDescriptorData.proto", 
  &descriptor_table_ChannelDescriptorData_2eproto_once, descriptor_table_ChannelDescriptorData_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_ChannelDescriptorData_2eproto::offsets,
  file_level_metadata_ChannelDescriptorData_2eproto, file_level_enum_descriptors_ChannelDescriptorData_2eproto, file_level_service_descriptors_ChannelDescriptorData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ChannelDescriptorData_2eproto_getter() {
  return &descriptor_table_ChannelDescriptorData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ChannelDescriptorData_2eproto(&descriptor_table_ChannelDescriptorData_2eproto);
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class ChannelDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelDescriptor>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::aasdk::proto::data::SensorChannel& sensor_channel(const ChannelDescriptor* msg);
  static void set_has_sensor_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aasdk::proto::data::AVChannel& av_channel(const ChannelDescriptor* msg);
  static void set_has_av_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aasdk::proto::data::InputChannel& input_channel(const ChannelDescriptor* msg);
  static void set_has_input_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aasdk::proto::data::AVInputChannel& av_input_channel(const ChannelDescriptor* msg);
  static void set_has_av_input_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::aasdk::proto::data::BluetoothChannel& bluetooth_channel(const ChannelDescriptor* msg);
  static void set_has_bluetooth_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::aasdk::proto::data::NavigationChannel& navigation_channel(const ChannelDescriptor* msg);
  static void set_has_navigation_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::aasdk::proto::data::MediaInfoChannel& media_infochannel(const ChannelDescriptor* msg);
  static void set_has_media_infochannel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::aasdk::proto::data::VendorExtensionChannel& vendor_extension_channel(const ChannelDescriptor* msg);
  static void set_has_vendor_extension_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::aasdk::proto::data::WifiChannel& wifi_channel(const ChannelDescriptor* msg);
  static void set_has_wifi_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000200) ^ 0x00000200) != 0;
  }
};

const ::aasdk::proto::data::SensorChannel&
ChannelDescriptor::_Internal::sensor_channel(const ChannelDescriptor* msg) {
  return *msg->sensor_channel_;
}
const ::aasdk::proto::data::AVChannel&
ChannelDescriptor::_Internal::av_channel(const ChannelDescriptor* msg) {
  return *msg->av_channel_;
}
const ::aasdk::proto::data::InputChannel&
ChannelDescriptor::_Internal::input_channel(const ChannelDescriptor* msg) {
  return *msg->input_channel_;
}
const ::aasdk::proto::data::AVInputChannel&
ChannelDescriptor::_Internal::av_input_channel(const ChannelDescriptor* msg) {
  return *msg->av_input_channel_;
}
const ::aasdk::proto::data::BluetoothChannel&
ChannelDescriptor::_Internal::bluetooth_channel(const ChannelDescriptor* msg) {
  return *msg->bluetooth_channel_;
}
const ::aasdk::proto::data::NavigationChannel&
ChannelDescriptor::_Internal::navigation_channel(const ChannelDescriptor* msg) {
  return *msg->navigation_channel_;
}
const ::aasdk::proto::data::MediaInfoChannel&
ChannelDescriptor::_Internal::media_infochannel(const ChannelDescriptor* msg) {
  return *msg->media_infochannel_;
}
const ::aasdk::proto::data::VendorExtensionChannel&
ChannelDescriptor::_Internal::vendor_extension_channel(const ChannelDescriptor* msg) {
  return *msg->vendor_extension_channel_;
}
const ::aasdk::proto::data::WifiChannel&
ChannelDescriptor::_Internal::wifi_channel(const ChannelDescriptor* msg) {
  return *msg->wifi_channel_;
}
void ChannelDescriptor::clear_sensor_channel() {
  if (sensor_channel_ != nullptr) sensor_channel_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ChannelDescriptor::clear_av_channel() {
  if (av_channel_ != nullptr) av_channel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ChannelDescriptor::clear_input_channel() {
  if (input_channel_ != nullptr) input_channel_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ChannelDescriptor::clear_av_input_channel() {
  if (av_input_channel_ != nullptr) av_input_channel_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ChannelDescriptor::clear_bluetooth_channel() {
  if (bluetooth_channel_ != nullptr) bluetooth_channel_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ChannelDescriptor::clear_navigation_channel() {
  if (navigation_channel_ != nullptr) navigation_channel_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ChannelDescriptor::clear_media_infochannel() {
  if (media_infochannel_ != nullptr) media_infochannel_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void ChannelDescriptor::clear_vendor_extension_channel() {
  if (vendor_extension_channel_ != nullptr) vendor_extension_channel_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void ChannelDescriptor::clear_wifi_channel() {
  if (wifi_channel_ != nullptr) wifi_channel_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
ChannelDescriptor::ChannelDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.data.ChannelDescriptor)
}
ChannelDescriptor::ChannelDescriptor(const ChannelDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sensor_channel()) {
    sensor_channel_ = new ::aasdk::proto::data::SensorChannel(*from.sensor_channel_);
  } else {
    sensor_channel_ = nullptr;
  }
  if (from._internal_has_av_channel()) {
    av_channel_ = new ::aasdk::proto::data::AVChannel(*from.av_channel_);
  } else {
    av_channel_ = nullptr;
  }
  if (from._internal_has_input_channel()) {
    input_channel_ = new ::aasdk::proto::data::InputChannel(*from.input_channel_);
  } else {
    input_channel_ = nullptr;
  }
  if (from._internal_has_av_input_channel()) {
    av_input_channel_ = new ::aasdk::proto::data::AVInputChannel(*from.av_input_channel_);
  } else {
    av_input_channel_ = nullptr;
  }
  if (from._internal_has_bluetooth_channel()) {
    bluetooth_channel_ = new ::aasdk::proto::data::BluetoothChannel(*from.bluetooth_channel_);
  } else {
    bluetooth_channel_ = nullptr;
  }
  if (from._internal_has_navigation_channel()) {
    navigation_channel_ = new ::aasdk::proto::data::NavigationChannel(*from.navigation_channel_);
  } else {
    navigation_channel_ = nullptr;
  }
  if (from._internal_has_media_infochannel()) {
    media_infochannel_ = new ::aasdk::proto::data::MediaInfoChannel(*from.media_infochannel_);
  } else {
    media_infochannel_ = nullptr;
  }
  if (from._internal_has_vendor_extension_channel()) {
    vendor_extension_channel_ = new ::aasdk::proto::data::VendorExtensionChannel(*from.vendor_extension_channel_);
  } else {
    vendor_extension_channel_ = nullptr;
  }
  if (from._internal_has_wifi_channel()) {
    wifi_channel_ = new ::aasdk::proto::data::WifiChannel(*from.wifi_channel_);
  } else {
    wifi_channel_ = nullptr;
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.data.ChannelDescriptor)
}

void ChannelDescriptor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sensor_channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&sensor_channel_)) + sizeof(channel_id_));
}

ChannelDescriptor::~ChannelDescriptor() {
  // @@protoc_insertion_point(destructor:aasdk.proto.data.ChannelDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sensor_channel_;
  if (this != internal_default_instance()) delete av_channel_;
  if (this != internal_default_instance()) delete input_channel_;
  if (this != internal_default_instance()) delete av_input_channel_;
  if (this != internal_default_instance()) delete bluetooth_channel_;
  if (this != internal_default_instance()) delete navigation_channel_;
  if (this != internal_default_instance()) delete media_infochannel_;
  if (this != internal_default_instance()) delete vendor_extension_channel_;
  if (this != internal_default_instance()) delete wifi_channel_;
}

void ChannelDescriptor::ArenaDtor(void* object) {
  ChannelDescriptor* _this = reinterpret_cast< ChannelDescriptor* >(object);
  (void)_this;
}
void ChannelDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.data.ChannelDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensor_channel_ != nullptr);
      sensor_channel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(av_channel_ != nullptr);
      av_channel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(input_channel_ != nullptr);
      input_channel_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(av_input_channel_ != nullptr);
      av_input_channel_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(bluetooth_channel_ != nullptr);
      bluetooth_channel_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(navigation_channel_ != nullptr);
      navigation_channel_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(media_infochannel_ != nullptr);
      media_infochannel_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(vendor_extension_channel_ != nullptr);
      vendor_extension_channel_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(wifi_channel_ != nullptr);
    wifi_channel_->Clear();
  }
  channel_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.SensorChannel sensor_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.AVChannel av_channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_av_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.InputChannel input_channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.AVInputChannel av_input_channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_av_input_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.BluetoothChannel bluetooth_channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bluetooth_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.NavigationChannel navigation_channel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_infochannel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_vendor_extension_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.WifiChannel wifi_channel = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_wifi_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.data.ChannelDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 channel_id = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel_id(), target);
  }

  // optional .aasdk.proto.data.SensorChannel sensor_channel = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sensor_channel(this), target, stream);
  }

  // optional .aasdk.proto.data.AVChannel av_channel = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::av_channel(this), target, stream);
  }

  // optional .aasdk.proto.data.InputChannel input_channel = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::input_channel(this), target, stream);
  }

  // optional .aasdk.proto.data.AVInputChannel av_input_channel = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::av_input_channel(this), target, stream);
  }

  // optional .aasdk.proto.data.BluetoothChannel bluetooth_channel = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bluetooth_channel(this), target, stream);
  }

  // optional .aasdk.proto.data.NavigationChannel navigation_channel = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::navigation_channel(this), target, stream);
  }

  // optional .aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::media_infochannel(this), target, stream);
  }

  // optional .aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::vendor_extension_channel(this), target, stream);
  }

  // optional .aasdk.proto.data.WifiChannel wifi_channel = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::wifi_channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.data.ChannelDescriptor)
  return target;
}

size_t ChannelDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.data.ChannelDescriptor)
  size_t total_size = 0;

  // required uint32 channel_id = 1;
  if (_internal_has_channel_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .aasdk.proto.data.SensorChannel sensor_channel = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_channel_);
    }

    // optional .aasdk.proto.data.AVChannel av_channel = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *av_channel_);
    }

    // optional .aasdk.proto.data.InputChannel input_channel = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_channel_);
    }

    // optional .aasdk.proto.data.AVInputChannel av_input_channel = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *av_input_channel_);
    }

    // optional .aasdk.proto.data.BluetoothChannel bluetooth_channel = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bluetooth_channel_);
    }

    // optional .aasdk.proto.data.NavigationChannel navigation_channel = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navigation_channel_);
    }

    // optional .aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *media_infochannel_);
    }

    // optional .aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vendor_extension_channel_);
    }

  }
  // optional .aasdk.proto.data.WifiChannel wifi_channel = 16;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wifi_channel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aasdk.proto.data.ChannelDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aasdk.proto.data.ChannelDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aasdk.proto.data.ChannelDescriptor)
    MergeFrom(*source);
  }
}

void ChannelDescriptor::MergeFrom(const ChannelDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.data.ChannelDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sensor_channel()->::aasdk::proto::data::SensorChannel::MergeFrom(from._internal_sensor_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_av_channel()->::aasdk::proto::data::AVChannel::MergeFrom(from._internal_av_channel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_input_channel()->::aasdk::proto::data::InputChannel::MergeFrom(from._internal_input_channel());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_av_input_channel()->::aasdk::proto::data::AVInputChannel::MergeFrom(from._internal_av_input_channel());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_bluetooth_channel()->::aasdk::proto::data::BluetoothChannel::MergeFrom(from._internal_bluetooth_channel());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_navigation_channel()->::aasdk::proto::data::NavigationChannel::MergeFrom(from._internal_navigation_channel());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_media_infochannel()->::aasdk::proto::data::MediaInfoChannel::MergeFrom(from._internal_media_infochannel());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_vendor_extension_channel()->::aasdk::proto::data::VendorExtensionChannel::MergeFrom(from._internal_vendor_extension_channel());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_wifi_channel()->::aasdk::proto::data::WifiChannel::MergeFrom(from._internal_wifi_channel());
    }
    if (cached_has_bits & 0x00000200u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aasdk.proto.data.ChannelDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDescriptor::CopyFrom(const ChannelDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.data.ChannelDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDescriptor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sensor_channel()) {
    if (!sensor_channel_->IsInitialized()) return false;
  }
  if (_internal_has_av_channel()) {
    if (!av_channel_->IsInitialized()) return false;
  }
  if (_internal_has_input_channel()) {
    if (!input_channel_->IsInitialized()) return false;
  }
  if (_internal_has_av_input_channel()) {
    if (!av_input_channel_->IsInitialized()) return false;
  }
  if (_internal_has_bluetooth_channel()) {
    if (!bluetooth_channel_->IsInitialized()) return false;
  }
  if (_internal_has_navigation_channel()) {
    if (!navigation_channel_->IsInitialized()) return false;
  }
  if (_internal_has_vendor_extension_channel()) {
    if (!vendor_extension_channel_->IsInitialized()) return false;
  }
  if (_internal_has_wifi_channel()) {
    if (!wifi_channel_->IsInitialized()) return false;
  }
  return true;
}

void ChannelDescriptor::InternalSwap(ChannelDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelDescriptor, channel_id_)
      + sizeof(ChannelDescriptor::channel_id_)
      - PROTOBUF_FIELD_OFFSET(ChannelDescriptor, sensor_channel_)>(
          reinterpret_cast<char*>(&sensor_channel_),
          reinterpret_cast<char*>(&other->sensor_channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChannelDescriptorData_2eproto_getter, &descriptor_table_ChannelDescriptorData_2eproto_once,
      file_level_metadata_ChannelDescriptorData_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::data::ChannelDescriptor* Arena::CreateMaybeMessage< ::aasdk::proto::data::ChannelDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::data::ChannelDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
