// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoFocusRequestMessage.proto

#include "VideoFocusRequestMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace messages {
constexpr VideoFocusRequest::VideoFocusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disp_index_(0)
  , focus_mode_(0)

  , focus_reason_(0)
{}
struct VideoFocusRequestDefaultTypeInternal {
  constexpr VideoFocusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoFocusRequestDefaultTypeInternal() {}
  union {
    VideoFocusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoFocusRequestDefaultTypeInternal _VideoFocusRequest_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_VideoFocusRequestMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_VideoFocusRequestMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_VideoFocusRequestMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_VideoFocusRequestMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::VideoFocusRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::VideoFocusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::VideoFocusRequest, disp_index_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::VideoFocusRequest, focus_mode_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::VideoFocusRequest, focus_reason_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::aasdk::proto::messages::VideoFocusRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::messages::_VideoFocusRequest_default_instance_),
};

const char descriptor_table_protodef_VideoFocusRequestMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036VideoFocusRequestMessage.proto\022\024aasdk."
  "proto.messages\032\030VideoFocusModeEnum.proto"
  "\032\032VideoFocusReasonEnum.proto\"\243\001\n\021VideoFo"
  "cusRequest\022\022\n\ndisp_index\030\001 \001(\005\022:\n\nfocus_"
  "mode\030\002 \002(\0162&.aasdk.proto.enums.VideoFocu"
  "sMode.Enum\022>\n\014focus_reason\030\003 \002(\0162(.aasdk"
  ".proto.enums.VideoFocusReason.Enum"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_VideoFocusRequestMessage_2eproto_deps[2] = {
  &::descriptor_table_VideoFocusModeEnum_2eproto,
  &::descriptor_table_VideoFocusReasonEnum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_VideoFocusRequestMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VideoFocusRequestMessage_2eproto = {
  false, false, 274, descriptor_table_protodef_VideoFocusRequestMessage_2eproto, "VideoFocusRequestMessage.proto", 
  &descriptor_table_VideoFocusRequestMessage_2eproto_once, descriptor_table_VideoFocusRequestMessage_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_VideoFocusRequestMessage_2eproto::offsets,
  file_level_metadata_VideoFocusRequestMessage_2eproto, file_level_enum_descriptors_VideoFocusRequestMessage_2eproto, file_level_service_descriptors_VideoFocusRequestMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_VideoFocusRequestMessage_2eproto_getter() {
  return &descriptor_table_VideoFocusRequestMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_VideoFocusRequestMessage_2eproto(&descriptor_table_VideoFocusRequestMessage_2eproto);
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class VideoFocusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoFocusRequest>()._has_bits_);
  static void set_has_disp_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_focus_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_focus_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

VideoFocusRequest::VideoFocusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.messages.VideoFocusRequest)
}
VideoFocusRequest::VideoFocusRequest(const VideoFocusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&disp_index_, &from.disp_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&focus_reason_) -
    reinterpret_cast<char*>(&disp_index_)) + sizeof(focus_reason_));
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.messages.VideoFocusRequest)
}

void VideoFocusRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&disp_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&focus_reason_) -
    reinterpret_cast<char*>(&disp_index_)) + sizeof(focus_reason_));
}

VideoFocusRequest::~VideoFocusRequest() {
  // @@protoc_insertion_point(destructor:aasdk.proto.messages.VideoFocusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoFocusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoFocusRequest::ArenaDtor(void* object) {
  VideoFocusRequest* _this = reinterpret_cast< VideoFocusRequest* >(object);
  (void)_this;
}
void VideoFocusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoFocusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoFocusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.messages.VideoFocusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&disp_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&focus_reason_) -
        reinterpret_cast<char*>(&disp_index_)) + sizeof(focus_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoFocusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 disp_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_disp_index(&has_bits);
          disp_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .aasdk.proto.enums.VideoFocusMode.Enum focus_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aasdk::proto::enums::VideoFocusMode_Enum_IsValid(val))) {
            _internal_set_focus_mode(static_cast<::aasdk::proto::enums::VideoFocusMode_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .aasdk.proto.enums.VideoFocusReason.Enum focus_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aasdk::proto::enums::VideoFocusReason_Enum_IsValid(val))) {
            _internal_set_focus_reason(static_cast<::aasdk::proto::enums::VideoFocusReason_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoFocusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.messages.VideoFocusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 disp_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_disp_index(), target);
  }

  // required .aasdk.proto.enums.VideoFocusMode.Enum focus_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_focus_mode(), target);
  }

  // required .aasdk.proto.enums.VideoFocusReason.Enum focus_reason = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_focus_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.messages.VideoFocusRequest)
  return target;
}

size_t VideoFocusRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aasdk.proto.messages.VideoFocusRequest)
  size_t total_size = 0;

  if (_internal_has_focus_mode()) {
    // required .aasdk.proto.enums.VideoFocusMode.Enum focus_mode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_focus_mode());
  }

  if (_internal_has_focus_reason()) {
    // required .aasdk.proto.enums.VideoFocusReason.Enum focus_reason = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_focus_reason());
  }

  return total_size;
}
size_t VideoFocusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.messages.VideoFocusRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .aasdk.proto.enums.VideoFocusMode.Enum focus_mode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_focus_mode());

    // required .aasdk.proto.enums.VideoFocusReason.Enum focus_reason = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_focus_reason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 disp_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disp_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoFocusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aasdk.proto.messages.VideoFocusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFocusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoFocusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aasdk.proto.messages.VideoFocusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aasdk.proto.messages.VideoFocusRequest)
    MergeFrom(*source);
  }
}

void VideoFocusRequest::MergeFrom(const VideoFocusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.messages.VideoFocusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      disp_index_ = from.disp_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      focus_mode_ = from.focus_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      focus_reason_ = from.focus_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoFocusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aasdk.proto.messages.VideoFocusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFocusRequest::CopyFrom(const VideoFocusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.messages.VideoFocusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFocusRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VideoFocusRequest::InternalSwap(VideoFocusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoFocusRequest, focus_reason_)
      + sizeof(VideoFocusRequest::focus_reason_)
      - PROTOBUF_FIELD_OFFSET(VideoFocusRequest, disp_index_)>(
          reinterpret_cast<char*>(&disp_index_),
          reinterpret_cast<char*>(&other->disp_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoFocusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_VideoFocusRequestMessage_2eproto_getter, &descriptor_table_VideoFocusRequestMessage_2eproto_once,
      file_level_metadata_VideoFocusRequestMessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::messages::VideoFocusRequest* Arena::CreateMaybeMessage< ::aasdk::proto::messages::VideoFocusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::messages::VideoFocusRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
