// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorChannelMessageIdsEnum.proto

#include "SensorChannelMessageIdsEnum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace ids {
constexpr SensorChannelMessage::SensorChannelMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SensorChannelMessageDefaultTypeInternal {
  constexpr SensorChannelMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorChannelMessageDefaultTypeInternal() {}
  union {
    SensorChannelMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorChannelMessageDefaultTypeInternal _SensorChannelMessage_default_instance_;
}  // namespace ids
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SensorChannelMessageIdsEnum_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SensorChannelMessageIdsEnum_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SensorChannelMessageIdsEnum_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SensorChannelMessageIdsEnum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::ids::SensorChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::aasdk::proto::ids::SensorChannelMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::ids::_SensorChannelMessage_default_instance_),
};

const char descriptor_table_protodef_SensorChannelMessageIdsEnum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!SensorChannelMessageIdsEnum.proto\022\017aas"
  "dk.proto.ids\"\200\001\n\024SensorChannelMessage\"h\n"
  "\004Enum\022\010\n\004NONE\020\000\022\032\n\024SENSOR_START_REQUEST\020"
  "\201\200\002\022\033\n\025SENSOR_START_RESPONSE\020\202\200\002\022\035\n\027SENS"
  "OR_EVENT_INDICATION\020\203\200\002"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SensorChannelMessageIdsEnum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SensorChannelMessageIdsEnum_2eproto = {
  false, false, 183, descriptor_table_protodef_SensorChannelMessageIdsEnum_2eproto, "SensorChannelMessageIdsEnum.proto", 
  &descriptor_table_SensorChannelMessageIdsEnum_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_SensorChannelMessageIdsEnum_2eproto::offsets,
  file_level_metadata_SensorChannelMessageIdsEnum_2eproto, file_level_enum_descriptors_SensorChannelMessageIdsEnum_2eproto, file_level_service_descriptors_SensorChannelMessageIdsEnum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_SensorChannelMessageIdsEnum_2eproto_getter() {
  return &descriptor_table_SensorChannelMessageIdsEnum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_SensorChannelMessageIdsEnum_2eproto(&descriptor_table_SensorChannelMessageIdsEnum_2eproto);
namespace aasdk {
namespace proto {
namespace ids {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorChannelMessage_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SensorChannelMessageIdsEnum_2eproto);
  return file_level_enum_descriptors_SensorChannelMessageIdsEnum_2eproto[0];
}
bool SensorChannelMessage_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 32769:
    case 32770:
    case 32771:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorChannelMessage_Enum SensorChannelMessage::NONE;
constexpr SensorChannelMessage_Enum SensorChannelMessage::SENSOR_START_REQUEST;
constexpr SensorChannelMessage_Enum SensorChannelMessage::SENSOR_START_RESPONSE;
constexpr SensorChannelMessage_Enum SensorChannelMessage::SENSOR_EVENT_INDICATION;
constexpr SensorChannelMessage_Enum SensorChannelMessage::Enum_MIN;
constexpr SensorChannelMessage_Enum SensorChannelMessage::Enum_MAX;
constexpr int SensorChannelMessage::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SensorChannelMessage::_Internal {
 public:
};

SensorChannelMessage::SensorChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.ids.SensorChannelMessage)
}
SensorChannelMessage::SensorChannelMessage(const SensorChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.ids.SensorChannelMessage)
}

void SensorChannelMessage::SharedCtor() {
}

SensorChannelMessage::~SensorChannelMessage() {
  // @@protoc_insertion_point(destructor:aasdk.proto.ids.SensorChannelMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorChannelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorChannelMessage::ArenaDtor(void* object) {
  SensorChannelMessage* _this = reinterpret_cast< SensorChannelMessage* >(object);
  (void)_this;
}
void SensorChannelMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorChannelMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.ids.SensorChannelMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorChannelMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorChannelMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.ids.SensorChannelMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.ids.SensorChannelMessage)
  return target;
}

size_t SensorChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.ids.SensorChannelMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorChannelMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aasdk.proto.ids.SensorChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorChannelMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorChannelMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aasdk.proto.ids.SensorChannelMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aasdk.proto.ids.SensorChannelMessage)
    MergeFrom(*source);
  }
}

void SensorChannelMessage::MergeFrom(const SensorChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.ids.SensorChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SensorChannelMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aasdk.proto.ids.SensorChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorChannelMessage::CopyFrom(const SensorChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.ids.SensorChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorChannelMessage::IsInitialized() const {
  return true;
}

void SensorChannelMessage::InternalSwap(SensorChannelMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorChannelMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SensorChannelMessageIdsEnum_2eproto_getter, &descriptor_table_SensorChannelMessageIdsEnum_2eproto_once,
      file_level_metadata_SensorChannelMessageIdsEnum_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ids
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::ids::SensorChannelMessage* Arena::CreateMaybeMessage< ::aasdk::proto::ids::SensorChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::ids::SensorChannelMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
