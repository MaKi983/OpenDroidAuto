// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ButtonCodeEnum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ButtonCodeEnum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ButtonCodeEnum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ButtonCodeEnum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ButtonCodeEnum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ButtonCodeEnum_2eproto;
namespace aasdk {
namespace proto {
namespace enums {
class ButtonCode;
struct ButtonCodeDefaultTypeInternal;
extern ButtonCodeDefaultTypeInternal _ButtonCode_default_instance_;
}  // namespace enums
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> ::aasdk::proto::enums::ButtonCode* Arena::CreateMaybeMessage<::aasdk::proto::enums::ButtonCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aasdk {
namespace proto {
namespace enums {

enum ButtonCode_Enum : int {
  ButtonCode_Enum_NONE = 0,
  ButtonCode_Enum_MICROPHONE_2 = 1,
  ButtonCode_Enum_MENU = 2,
  ButtonCode_Enum_HOME = 3,
  ButtonCode_Enum_BACK = 4,
  ButtonCode_Enum_PHONE = 5,
  ButtonCode_Enum_CALL_END = 6,
  ButtonCode_Enum_UP = 19,
  ButtonCode_Enum_DOWN = 20,
  ButtonCode_Enum_LEFT = 21,
  ButtonCode_Enum_RIGHT = 22,
  ButtonCode_Enum_ENTER = 23,
  ButtonCode_Enum_MICROPHONE_1 = 84,
  ButtonCode_Enum_TOGGLE_PLAY = 85,
  ButtonCode_Enum_NEXT = 87,
  ButtonCode_Enum_PREV = 88,
  ButtonCode_Enum_PLAY = 126,
  ButtonCode_Enum_PAUSE = 127,
  ButtonCode_Enum_MUSIC = 209,
  ButtonCode_Enum_SCROLL_WHEEL = 65536,
  ButtonCode_Enum_MEDIA = 65537,
  ButtonCode_Enum_NAVIGATION = 65538,
  ButtonCode_Enum_RADIO = 65539,
  ButtonCode_Enum_TEL = 65540,
  ButtonCode_Enum_PRIMARY_BUTTON = 65541,
  ButtonCode_Enum_SECONDARY_BUTTON = 65542,
  ButtonCode_Enum_TERTIARY_BUTTON = 65543
};
bool ButtonCode_Enum_IsValid(int value);
constexpr ButtonCode_Enum ButtonCode_Enum_Enum_MIN = ButtonCode_Enum_NONE;
constexpr ButtonCode_Enum ButtonCode_Enum_Enum_MAX = ButtonCode_Enum_TERTIARY_BUTTON;
constexpr int ButtonCode_Enum_Enum_ARRAYSIZE = ButtonCode_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonCode_Enum_descriptor();
template<typename T>
inline const std::string& ButtonCode_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ButtonCode_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ButtonCode_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ButtonCode_Enum_descriptor(), enum_t_value);
}
inline bool ButtonCode_Enum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ButtonCode_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ButtonCode_Enum>(
    ButtonCode_Enum_descriptor(), name, value);
}
// ===================================================================

class ButtonCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aasdk.proto.enums.ButtonCode) */ {
 public:
  inline ButtonCode() : ButtonCode(nullptr) {}
  ~ButtonCode() override;
  explicit constexpr ButtonCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ButtonCode(const ButtonCode& from);
  ButtonCode(ButtonCode&& from) noexcept
    : ButtonCode() {
    *this = ::std::move(from);
  }

  inline ButtonCode& operator=(const ButtonCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtonCode& operator=(ButtonCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ButtonCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ButtonCode* internal_default_instance() {
    return reinterpret_cast<const ButtonCode*>(
               &_ButtonCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ButtonCode& a, ButtonCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtonCode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtonCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ButtonCode* New() const final {
    return new ButtonCode();
  }

  ButtonCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ButtonCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ButtonCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ButtonCode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aasdk.proto.enums.ButtonCode";
  }
  protected:
  explicit ButtonCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ButtonCode_Enum Enum;
  static constexpr Enum NONE =
    ButtonCode_Enum_NONE;
  static constexpr Enum MICROPHONE_2 =
    ButtonCode_Enum_MICROPHONE_2;
  static constexpr Enum MENU =
    ButtonCode_Enum_MENU;
  static constexpr Enum HOME =
    ButtonCode_Enum_HOME;
  static constexpr Enum BACK =
    ButtonCode_Enum_BACK;
  static constexpr Enum PHONE =
    ButtonCode_Enum_PHONE;
  static constexpr Enum CALL_END =
    ButtonCode_Enum_CALL_END;
  static constexpr Enum UP =
    ButtonCode_Enum_UP;
  static constexpr Enum DOWN =
    ButtonCode_Enum_DOWN;
  static constexpr Enum LEFT =
    ButtonCode_Enum_LEFT;
  static constexpr Enum RIGHT =
    ButtonCode_Enum_RIGHT;
  static constexpr Enum ENTER =
    ButtonCode_Enum_ENTER;
  static constexpr Enum MICROPHONE_1 =
    ButtonCode_Enum_MICROPHONE_1;
  static constexpr Enum TOGGLE_PLAY =
    ButtonCode_Enum_TOGGLE_PLAY;
  static constexpr Enum NEXT =
    ButtonCode_Enum_NEXT;
  static constexpr Enum PREV =
    ButtonCode_Enum_PREV;
  static constexpr Enum PLAY =
    ButtonCode_Enum_PLAY;
  static constexpr Enum PAUSE =
    ButtonCode_Enum_PAUSE;
  static constexpr Enum MUSIC =
    ButtonCode_Enum_MUSIC;
  static constexpr Enum SCROLL_WHEEL =
    ButtonCode_Enum_SCROLL_WHEEL;
  static constexpr Enum MEDIA =
    ButtonCode_Enum_MEDIA;
  static constexpr Enum NAVIGATION =
    ButtonCode_Enum_NAVIGATION;
  static constexpr Enum RADIO =
    ButtonCode_Enum_RADIO;
  static constexpr Enum TEL =
    ButtonCode_Enum_TEL;
  static constexpr Enum PRIMARY_BUTTON =
    ButtonCode_Enum_PRIMARY_BUTTON;
  static constexpr Enum SECONDARY_BUTTON =
    ButtonCode_Enum_SECONDARY_BUTTON;
  static constexpr Enum TERTIARY_BUTTON =
    ButtonCode_Enum_TERTIARY_BUTTON;
  static inline bool Enum_IsValid(int value) {
    return ButtonCode_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    ButtonCode_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    ButtonCode_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    ButtonCode_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return ButtonCode_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return ButtonCode_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Enum* value) {
    return ButtonCode_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:aasdk.proto.enums.ButtonCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ButtonCodeEnum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ButtonCode

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace enums
}  // namespace proto
}  // namespace aasdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::aasdk::proto::enums::ButtonCode_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aasdk::proto::enums::ButtonCode_Enum>() {
  return ::aasdk::proto::enums::ButtonCode_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ButtonCodeEnum_2eproto
