// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputEventIndicationMessage.proto

#include "InputEventIndicationMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace messages {
constexpr InputEventIndication::InputEventIndication(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : touch_event_(nullptr)
  , button_event_(nullptr)
  , absolute_input_event_(nullptr)
  , relative_input_event_(nullptr)
  , timestamp_(uint64_t{0u})
  , disp_channel_(0){}
struct InputEventIndicationDefaultTypeInternal {
  constexpr InputEventIndicationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InputEventIndicationDefaultTypeInternal() {}
  union {
    InputEventIndication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InputEventIndicationDefaultTypeInternal _InputEventIndication_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_InputEventIndicationMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_InputEventIndicationMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_InputEventIndicationMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_InputEventIndicationMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::InputEventIndication, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::InputEventIndication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::InputEventIndication, timestamp_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::InputEventIndication, disp_channel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::InputEventIndication, touch_event_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::InputEventIndication, button_event_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::InputEventIndication, absolute_input_event_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::InputEventIndication, relative_input_event_),
  4,
  5,
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::aasdk::proto::messages::InputEventIndication)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::messages::_InputEventIndication_default_instance_),
};

const char descriptor_table_protodef_InputEventIndicationMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!InputEventIndicationMessage.proto\022\024aas"
  "dk.proto.messages\032\024TouchEventData.proto\032"
  "\026ButtonEventsData.proto\032\035AbsoluteInputEv"
  "entsData.proto\032\035RelativeInputEventsData."
  "proto\"\262\002\n\024InputEventIndication\022\021\n\ttimest"
  "amp\030\001 \002(\004\022\024\n\014disp_channel\030\002 \001(\005\0221\n\013touch"
  "_event\030\003 \001(\0132\034.aasdk.proto.data.TouchEve"
  "nt\0224\n\014button_event\030\004 \001(\0132\036.aasdk.proto.d"
  "ata.ButtonEvents\022C\n\024absolute_input_event"
  "\030\005 \001(\0132%.aasdk.proto.data.AbsoluteInputE"
  "vents\022C\n\024relative_input_event\030\006 \001(\0132%.aa"
  "sdk.proto.data.RelativeInputEvents"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_InputEventIndicationMessage_2eproto_deps[4] = {
  &::descriptor_table_AbsoluteInputEventsData_2eproto,
  &::descriptor_table_ButtonEventsData_2eproto,
  &::descriptor_table_RelativeInputEventsData_2eproto,
  &::descriptor_table_TouchEventData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_InputEventIndicationMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InputEventIndicationMessage_2eproto = {
  false, false, 474, descriptor_table_protodef_InputEventIndicationMessage_2eproto, "InputEventIndicationMessage.proto", 
  &descriptor_table_InputEventIndicationMessage_2eproto_once, descriptor_table_InputEventIndicationMessage_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_InputEventIndicationMessage_2eproto::offsets,
  file_level_metadata_InputEventIndicationMessage_2eproto, file_level_enum_descriptors_InputEventIndicationMessage_2eproto, file_level_service_descriptors_InputEventIndicationMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_InputEventIndicationMessage_2eproto_getter() {
  return &descriptor_table_InputEventIndicationMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_InputEventIndicationMessage_2eproto(&descriptor_table_InputEventIndicationMessage_2eproto);
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class InputEventIndication::_Internal {
 public:
  using HasBits = decltype(std::declval<InputEventIndication>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disp_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::aasdk::proto::data::TouchEvent& touch_event(const InputEventIndication* msg);
  static void set_has_touch_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aasdk::proto::data::ButtonEvents& button_event(const InputEventIndication* msg);
  static void set_has_button_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::aasdk::proto::data::AbsoluteInputEvents& absolute_input_event(const InputEventIndication* msg);
  static void set_has_absolute_input_event(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::aasdk::proto::data::RelativeInputEvents& relative_input_event(const InputEventIndication* msg);
  static void set_has_relative_input_event(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::aasdk::proto::data::TouchEvent&
InputEventIndication::_Internal::touch_event(const InputEventIndication* msg) {
  return *msg->touch_event_;
}
const ::aasdk::proto::data::ButtonEvents&
InputEventIndication::_Internal::button_event(const InputEventIndication* msg) {
  return *msg->button_event_;
}
const ::aasdk::proto::data::AbsoluteInputEvents&
InputEventIndication::_Internal::absolute_input_event(const InputEventIndication* msg) {
  return *msg->absolute_input_event_;
}
const ::aasdk::proto::data::RelativeInputEvents&
InputEventIndication::_Internal::relative_input_event(const InputEventIndication* msg) {
  return *msg->relative_input_event_;
}
void InputEventIndication::clear_touch_event() {
  if (touch_event_ != nullptr) touch_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InputEventIndication::clear_button_event() {
  if (button_event_ != nullptr) button_event_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InputEventIndication::clear_absolute_input_event() {
  if (absolute_input_event_ != nullptr) absolute_input_event_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void InputEventIndication::clear_relative_input_event() {
  if (relative_input_event_ != nullptr) relative_input_event_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
InputEventIndication::InputEventIndication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.messages.InputEventIndication)
}
InputEventIndication::InputEventIndication(const InputEventIndication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_touch_event()) {
    touch_event_ = new ::aasdk::proto::data::TouchEvent(*from.touch_event_);
  } else {
    touch_event_ = nullptr;
  }
  if (from._internal_has_button_event()) {
    button_event_ = new ::aasdk::proto::data::ButtonEvents(*from.button_event_);
  } else {
    button_event_ = nullptr;
  }
  if (from._internal_has_absolute_input_event()) {
    absolute_input_event_ = new ::aasdk::proto::data::AbsoluteInputEvents(*from.absolute_input_event_);
  } else {
    absolute_input_event_ = nullptr;
  }
  if (from._internal_has_relative_input_event()) {
    relative_input_event_ = new ::aasdk::proto::data::RelativeInputEvents(*from.relative_input_event_);
  } else {
    relative_input_event_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&disp_channel_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(disp_channel_));
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.messages.InputEventIndication)
}

inline void InputEventIndication::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&touch_event_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disp_channel_) -
    reinterpret_cast<char*>(&touch_event_)) + sizeof(disp_channel_));
}

InputEventIndication::~InputEventIndication() {
  // @@protoc_insertion_point(destructor:aasdk.proto.messages.InputEventIndication)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InputEventIndication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete touch_event_;
  if (this != internal_default_instance()) delete button_event_;
  if (this != internal_default_instance()) delete absolute_input_event_;
  if (this != internal_default_instance()) delete relative_input_event_;
}

void InputEventIndication::ArenaDtor(void* object) {
  InputEventIndication* _this = reinterpret_cast< InputEventIndication* >(object);
  (void)_this;
}
void InputEventIndication::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputEventIndication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InputEventIndication::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.messages.InputEventIndication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(touch_event_ != nullptr);
      touch_event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(button_event_ != nullptr);
      button_event_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(absolute_input_event_ != nullptr);
      absolute_input_event_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(relative_input_event_ != nullptr);
      relative_input_event_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disp_channel_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(disp_channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputEventIndication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 disp_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_disp_channel(&has_bits);
          disp_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.TouchEvent touch_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.ButtonEvents button_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_button_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.AbsoluteInputEvents absolute_input_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute_input_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aasdk.proto.data.RelativeInputEvents relative_input_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_input_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputEventIndication::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.messages.InputEventIndication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // optional int32 disp_channel = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_disp_channel(), target);
  }

  // optional .aasdk.proto.data.TouchEvent touch_event = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::touch_event(this), target, stream);
  }

  // optional .aasdk.proto.data.ButtonEvents button_event = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::button_event(this), target, stream);
  }

  // optional .aasdk.proto.data.AbsoluteInputEvents absolute_input_event = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::absolute_input_event(this), target, stream);
  }

  // optional .aasdk.proto.data.RelativeInputEvents relative_input_event = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::relative_input_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.messages.InputEventIndication)
  return target;
}

size_t InputEventIndication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.messages.InputEventIndication)
  size_t total_size = 0;

  // required uint64 timestamp = 1;
  if (_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .aasdk.proto.data.TouchEvent touch_event = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touch_event_);
    }

    // optional .aasdk.proto.data.ButtonEvents button_event = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *button_event_);
    }

    // optional .aasdk.proto.data.AbsoluteInputEvents absolute_input_event = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *absolute_input_event_);
    }

    // optional .aasdk.proto.data.RelativeInputEvents relative_input_event = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relative_input_event_);
    }

  }
  // optional int32 disp_channel = 2;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disp_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputEventIndication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InputEventIndication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputEventIndication::GetClassData() const { return &_class_data_; }

void InputEventIndication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InputEventIndication *>(to)->MergeFrom(
      static_cast<const InputEventIndication &>(from));
}


void InputEventIndication::MergeFrom(const InputEventIndication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.messages.InputEventIndication)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_touch_event()->::aasdk::proto::data::TouchEvent::MergeFrom(from._internal_touch_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_button_event()->::aasdk::proto::data::ButtonEvents::MergeFrom(from._internal_button_event());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_absolute_input_event()->::aasdk::proto::data::AbsoluteInputEvents::MergeFrom(from._internal_absolute_input_event());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_relative_input_event()->::aasdk::proto::data::RelativeInputEvents::MergeFrom(from._internal_relative_input_event());
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      disp_channel_ = from.disp_channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputEventIndication::CopyFrom(const InputEventIndication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.messages.InputEventIndication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputEventIndication::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_touch_event()) {
    if (!touch_event_->IsInitialized()) return false;
  }
  if (_internal_has_button_event()) {
    if (!button_event_->IsInitialized()) return false;
  }
  if (_internal_has_absolute_input_event()) {
    if (!absolute_input_event_->IsInitialized()) return false;
  }
  if (_internal_has_relative_input_event()) {
    if (!relative_input_event_->IsInitialized()) return false;
  }
  return true;
}

void InputEventIndication::InternalSwap(InputEventIndication* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputEventIndication, disp_channel_)
      + sizeof(InputEventIndication::disp_channel_)
      - PROTOBUF_FIELD_OFFSET(InputEventIndication, touch_event_)>(
          reinterpret_cast<char*>(&touch_event_),
          reinterpret_cast<char*>(&other->touch_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputEventIndication::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_InputEventIndicationMessage_2eproto_getter, &descriptor_table_InputEventIndicationMessage_2eproto_once,
      file_level_metadata_InputEventIndicationMessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::messages::InputEventIndication* Arena::CreateMaybeMessage< ::aasdk::proto::messages::InputEventIndication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::messages::InputEventIndication >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
