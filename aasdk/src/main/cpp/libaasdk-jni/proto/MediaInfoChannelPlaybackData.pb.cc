// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MediaInfoChannelPlaybackData.proto

#include "MediaInfoChannelPlaybackData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace messages {
constexpr MediaInfoChannelPlaybackData::MediaInfoChannelPlaybackData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : media_source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , playback_state_(0)

  , track_progress_(0)
  , unknown1_(0)
  , unknown2_(0)
  , unknown3_(0){}
struct MediaInfoChannelPlaybackDataDefaultTypeInternal {
  constexpr MediaInfoChannelPlaybackDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaInfoChannelPlaybackDataDefaultTypeInternal() {}
  union {
    MediaInfoChannelPlaybackData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaInfoChannelPlaybackDataDefaultTypeInternal _MediaInfoChannelPlaybackData_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MediaInfoChannelPlaybackData_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MediaInfoChannelPlaybackData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MediaInfoChannelPlaybackData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MediaInfoChannelPlaybackData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelPlaybackData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelPlaybackData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelPlaybackData, playback_state_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelPlaybackData, media_source_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelPlaybackData, track_progress_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelPlaybackData, unknown1_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelPlaybackData, unknown2_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelPlaybackData, unknown3_),
  1,
  0,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::aasdk::proto::messages::MediaInfoChannelPlaybackData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::messages::_MediaInfoChannelPlaybackData_default_instance_),
};

const char descriptor_table_protodef_MediaInfoChannelPlaybackData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"MediaInfoChannelPlaybackData.proto\022\024aa"
  "sdk.proto.messages\"\236\002\n\034MediaInfoChannelP"
  "laybackData\022X\n\016playback_state\030\001 \002(\0162@.aa"
  "sdk.proto.messages.MediaInfoChannelPlayb"
  "ackData.PlaybackState\022\024\n\014media_source\030\002 "
  "\002(\t\022\026\n\016track_progress\030\003 \002(\005\022\020\n\010unknown1\030"
  "\004 \002(\005\022\020\n\010unknown2\030\005 \002(\005\022\020\n\010unknown3\030\006 \002("
  "\005\"@\n\rPlaybackState\022\010\n\004NONE\020\000\022\020\n\014TRACK_CH"
  "ANGE\020\001\022\010\n\004PLAY\020\002\022\t\n\005PAUSE\020\003"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MediaInfoChannelPlaybackData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MediaInfoChannelPlaybackData_2eproto = {
  false, false, 347, descriptor_table_protodef_MediaInfoChannelPlaybackData_2eproto, "MediaInfoChannelPlaybackData.proto", 
  &descriptor_table_MediaInfoChannelPlaybackData_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_MediaInfoChannelPlaybackData_2eproto::offsets,
  file_level_metadata_MediaInfoChannelPlaybackData_2eproto, file_level_enum_descriptors_MediaInfoChannelPlaybackData_2eproto, file_level_service_descriptors_MediaInfoChannelPlaybackData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MediaInfoChannelPlaybackData_2eproto_getter() {
  return &descriptor_table_MediaInfoChannelPlaybackData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MediaInfoChannelPlaybackData_2eproto(&descriptor_table_MediaInfoChannelPlaybackData_2eproto);
namespace aasdk {
namespace proto {
namespace messages {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediaInfoChannelPlaybackData_PlaybackState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MediaInfoChannelPlaybackData_2eproto);
  return file_level_enum_descriptors_MediaInfoChannelPlaybackData_2eproto[0];
}
bool MediaInfoChannelPlaybackData_PlaybackState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MediaInfoChannelPlaybackData_PlaybackState MediaInfoChannelPlaybackData::NONE;
constexpr MediaInfoChannelPlaybackData_PlaybackState MediaInfoChannelPlaybackData::TRACK_CHANGE;
constexpr MediaInfoChannelPlaybackData_PlaybackState MediaInfoChannelPlaybackData::PLAY;
constexpr MediaInfoChannelPlaybackData_PlaybackState MediaInfoChannelPlaybackData::PAUSE;
constexpr MediaInfoChannelPlaybackData_PlaybackState MediaInfoChannelPlaybackData::PlaybackState_MIN;
constexpr MediaInfoChannelPlaybackData_PlaybackState MediaInfoChannelPlaybackData::PlaybackState_MAX;
constexpr int MediaInfoChannelPlaybackData::PlaybackState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class MediaInfoChannelPlaybackData::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfoChannelPlaybackData>()._has_bits_);
  static void set_has_playback_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_media_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unknown1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unknown2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unknown3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

MediaInfoChannelPlaybackData::MediaInfoChannelPlaybackData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.messages.MediaInfoChannelPlaybackData)
}
MediaInfoChannelPlaybackData::MediaInfoChannelPlaybackData(const MediaInfoChannelPlaybackData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  media_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_media_source()) {
    media_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media_source(), 
      GetArenaForAllocation());
  }
  ::memcpy(&playback_state_, &from.playback_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown3_) -
    reinterpret_cast<char*>(&playback_state_)) + sizeof(unknown3_));
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.messages.MediaInfoChannelPlaybackData)
}

void MediaInfoChannelPlaybackData::SharedCtor() {
media_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playback_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unknown3_) -
    reinterpret_cast<char*>(&playback_state_)) + sizeof(unknown3_));
}

MediaInfoChannelPlaybackData::~MediaInfoChannelPlaybackData() {
  // @@protoc_insertion_point(destructor:aasdk.proto.messages.MediaInfoChannelPlaybackData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MediaInfoChannelPlaybackData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  media_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MediaInfoChannelPlaybackData::ArenaDtor(void* object) {
  MediaInfoChannelPlaybackData* _this = reinterpret_cast< MediaInfoChannelPlaybackData* >(object);
  (void)_this;
}
void MediaInfoChannelPlaybackData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaInfoChannelPlaybackData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaInfoChannelPlaybackData::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.messages.MediaInfoChannelPlaybackData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    media_source_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&playback_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unknown3_) -
        reinterpret_cast<char*>(&playback_state_)) + sizeof(unknown3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaInfoChannelPlaybackData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .aasdk.proto.messages.MediaInfoChannelPlaybackData.PlaybackState playback_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aasdk::proto::messages::MediaInfoChannelPlaybackData_PlaybackState_IsValid(val))) {
            _internal_set_playback_state(static_cast<::aasdk::proto::messages::MediaInfoChannelPlaybackData_PlaybackState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string media_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_media_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aasdk.proto.messages.MediaInfoChannelPlaybackData.media_source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 track_progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_track_progress(&has_bits);
          track_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 unknown1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_unknown1(&has_bits);
          unknown1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 unknown2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_unknown2(&has_bits);
          unknown2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 unknown3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_unknown3(&has_bits);
          unknown3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaInfoChannelPlaybackData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.messages.MediaInfoChannelPlaybackData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .aasdk.proto.messages.MediaInfoChannelPlaybackData.PlaybackState playback_state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_playback_state(), target);
  }

  // required string media_source = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_media_source().data(), static_cast<int>(this->_internal_media_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aasdk.proto.messages.MediaInfoChannelPlaybackData.media_source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_media_source(), target);
  }

  // required int32 track_progress = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_track_progress(), target);
  }

  // required int32 unknown1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_unknown1(), target);
  }

  // required int32 unknown2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_unknown2(), target);
  }

  // required int32 unknown3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_unknown3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.messages.MediaInfoChannelPlaybackData)
  return target;
}

size_t MediaInfoChannelPlaybackData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aasdk.proto.messages.MediaInfoChannelPlaybackData)
  size_t total_size = 0;

  if (_internal_has_media_source()) {
    // required string media_source = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_source());
  }

  if (_internal_has_playback_state()) {
    // required .aasdk.proto.messages.MediaInfoChannelPlaybackData.PlaybackState playback_state = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playback_state());
  }

  if (_internal_has_track_progress()) {
    // required int32 track_progress = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_track_progress());
  }

  if (_internal_has_unknown1()) {
    // required int32 unknown1 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown1());
  }

  if (_internal_has_unknown2()) {
    // required int32 unknown2 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown2());
  }

  if (_internal_has_unknown3()) {
    // required int32 unknown3 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown3());
  }

  return total_size;
}
size_t MediaInfoChannelPlaybackData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.messages.MediaInfoChannelPlaybackData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string media_source = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_source());

    // required .aasdk.proto.messages.MediaInfoChannelPlaybackData.PlaybackState playback_state = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playback_state());

    // required int32 track_progress = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_track_progress());

    // required int32 unknown1 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown1());

    // required int32 unknown2 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown2());

    // required int32 unknown3 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown3());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaInfoChannelPlaybackData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aasdk.proto.messages.MediaInfoChannelPlaybackData)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaInfoChannelPlaybackData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaInfoChannelPlaybackData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aasdk.proto.messages.MediaInfoChannelPlaybackData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aasdk.proto.messages.MediaInfoChannelPlaybackData)
    MergeFrom(*source);
  }
}

void MediaInfoChannelPlaybackData::MergeFrom(const MediaInfoChannelPlaybackData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.messages.MediaInfoChannelPlaybackData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_media_source(from._internal_media_source());
    }
    if (cached_has_bits & 0x00000002u) {
      playback_state_ = from.playback_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      track_progress_ = from.track_progress_;
    }
    if (cached_has_bits & 0x00000008u) {
      unknown1_ = from.unknown1_;
    }
    if (cached_has_bits & 0x00000010u) {
      unknown2_ = from.unknown2_;
    }
    if (cached_has_bits & 0x00000020u) {
      unknown3_ = from.unknown3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaInfoChannelPlaybackData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aasdk.proto.messages.MediaInfoChannelPlaybackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaInfoChannelPlaybackData::CopyFrom(const MediaInfoChannelPlaybackData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.messages.MediaInfoChannelPlaybackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaInfoChannelPlaybackData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MediaInfoChannelPlaybackData::InternalSwap(MediaInfoChannelPlaybackData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &media_source_, GetArenaForAllocation(),
      &other->media_source_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaInfoChannelPlaybackData, unknown3_)
      + sizeof(MediaInfoChannelPlaybackData::unknown3_)
      - PROTOBUF_FIELD_OFFSET(MediaInfoChannelPlaybackData, playback_state_)>(
          reinterpret_cast<char*>(&playback_state_),
          reinterpret_cast<char*>(&other->playback_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaInfoChannelPlaybackData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MediaInfoChannelPlaybackData_2eproto_getter, &descriptor_table_MediaInfoChannelPlaybackData_2eproto_once,
      file_level_metadata_MediaInfoChannelPlaybackData_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::messages::MediaInfoChannelPlaybackData* Arena::CreateMaybeMessage< ::aasdk::proto::messages::MediaInfoChannelPlaybackData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::messages::MediaInfoChannelPlaybackData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
