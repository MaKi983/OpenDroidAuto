// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChannelDescriptorData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChannelDescriptorData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChannelDescriptorData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "SensorChannelData.pb.h"
#include "AVChannelData.pb.h"
#include "InputChannelData.pb.h"
#include "AVInputChannelData.pb.h"
#include "BluetoothChannelData.pb.h"
#include "NavigationChannelData.pb.h"
#include "VendorExtensionChannelData.pb.h"
#include "MediaInfoChannelData.pb.h"
#include "WifiChannelData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChannelDescriptorData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChannelDescriptorData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChannelDescriptorData_2eproto;
namespace aasdk {
namespace proto {
namespace data {
class ChannelDescriptor;
struct ChannelDescriptorDefaultTypeInternal;
extern ChannelDescriptorDefaultTypeInternal _ChannelDescriptor_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> ::aasdk::proto::data::ChannelDescriptor* Arena::CreateMaybeMessage<::aasdk::proto::data::ChannelDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class ChannelDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aasdk.proto.data.ChannelDescriptor) */ {
 public:
  inline ChannelDescriptor() : ChannelDescriptor(nullptr) {}
  ~ChannelDescriptor() override;
  explicit constexpr ChannelDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelDescriptor(const ChannelDescriptor& from);
  ChannelDescriptor(ChannelDescriptor&& from) noexcept
    : ChannelDescriptor() {
    *this = ::std::move(from);
  }

  inline ChannelDescriptor& operator=(const ChannelDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelDescriptor& operator=(ChannelDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelDescriptor* internal_default_instance() {
    return reinterpret_cast<const ChannelDescriptor*>(
               &_ChannelDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChannelDescriptor& a, ChannelDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelDescriptor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelDescriptor* New() const final {
    return new ChannelDescriptor();
  }

  ChannelDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aasdk.proto.data.ChannelDescriptor";
  }
  protected:
  explicit ChannelDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorChannelFieldNumber = 2,
    kAvChannelFieldNumber = 3,
    kInputChannelFieldNumber = 4,
    kAvInputChannelFieldNumber = 5,
    kBluetoothChannelFieldNumber = 6,
    kNavigationChannelFieldNumber = 8,
    kMediaInfoChannelFieldNumber = 9,
    kVendorExtensionChannelFieldNumber = 12,
    kWifiChannelFieldNumber = 16,
    kChannelIdFieldNumber = 1,
  };
  // optional .aasdk.proto.data.SensorChannel sensor_channel = 2;
  bool has_sensor_channel() const;
  private:
  bool _internal_has_sensor_channel() const;
  public:
  void clear_sensor_channel();
  const ::aasdk::proto::data::SensorChannel& sensor_channel() const;
  PROTOBUF_MUST_USE_RESULT ::aasdk::proto::data::SensorChannel* release_sensor_channel();
  ::aasdk::proto::data::SensorChannel* mutable_sensor_channel();
  void set_allocated_sensor_channel(::aasdk::proto::data::SensorChannel* sensor_channel);
  private:
  const ::aasdk::proto::data::SensorChannel& _internal_sensor_channel() const;
  ::aasdk::proto::data::SensorChannel* _internal_mutable_sensor_channel();
  public:
  void unsafe_arena_set_allocated_sensor_channel(
      ::aasdk::proto::data::SensorChannel* sensor_channel);
  ::aasdk::proto::data::SensorChannel* unsafe_arena_release_sensor_channel();

  // optional .aasdk.proto.data.AVChannel av_channel = 3;
  bool has_av_channel() const;
  private:
  bool _internal_has_av_channel() const;
  public:
  void clear_av_channel();
  const ::aasdk::proto::data::AVChannel& av_channel() const;
  PROTOBUF_MUST_USE_RESULT ::aasdk::proto::data::AVChannel* release_av_channel();
  ::aasdk::proto::data::AVChannel* mutable_av_channel();
  void set_allocated_av_channel(::aasdk::proto::data::AVChannel* av_channel);
  private:
  const ::aasdk::proto::data::AVChannel& _internal_av_channel() const;
  ::aasdk::proto::data::AVChannel* _internal_mutable_av_channel();
  public:
  void unsafe_arena_set_allocated_av_channel(
      ::aasdk::proto::data::AVChannel* av_channel);
  ::aasdk::proto::data::AVChannel* unsafe_arena_release_av_channel();

  // optional .aasdk.proto.data.InputChannel input_channel = 4;
  bool has_input_channel() const;
  private:
  bool _internal_has_input_channel() const;
  public:
  void clear_input_channel();
  const ::aasdk::proto::data::InputChannel& input_channel() const;
  PROTOBUF_MUST_USE_RESULT ::aasdk::proto::data::InputChannel* release_input_channel();
  ::aasdk::proto::data::InputChannel* mutable_input_channel();
  void set_allocated_input_channel(::aasdk::proto::data::InputChannel* input_channel);
  private:
  const ::aasdk::proto::data::InputChannel& _internal_input_channel() const;
  ::aasdk::proto::data::InputChannel* _internal_mutable_input_channel();
  public:
  void unsafe_arena_set_allocated_input_channel(
      ::aasdk::proto::data::InputChannel* input_channel);
  ::aasdk::proto::data::InputChannel* unsafe_arena_release_input_channel();

  // optional .aasdk.proto.data.AVInputChannel av_input_channel = 5;
  bool has_av_input_channel() const;
  private:
  bool _internal_has_av_input_channel() const;
  public:
  void clear_av_input_channel();
  const ::aasdk::proto::data::AVInputChannel& av_input_channel() const;
  PROTOBUF_MUST_USE_RESULT ::aasdk::proto::data::AVInputChannel* release_av_input_channel();
  ::aasdk::proto::data::AVInputChannel* mutable_av_input_channel();
  void set_allocated_av_input_channel(::aasdk::proto::data::AVInputChannel* av_input_channel);
  private:
  const ::aasdk::proto::data::AVInputChannel& _internal_av_input_channel() const;
  ::aasdk::proto::data::AVInputChannel* _internal_mutable_av_input_channel();
  public:
  void unsafe_arena_set_allocated_av_input_channel(
      ::aasdk::proto::data::AVInputChannel* av_input_channel);
  ::aasdk::proto::data::AVInputChannel* unsafe_arena_release_av_input_channel();

  // optional .aasdk.proto.data.BluetoothChannel bluetooth_channel = 6;
  bool has_bluetooth_channel() const;
  private:
  bool _internal_has_bluetooth_channel() const;
  public:
  void clear_bluetooth_channel();
  const ::aasdk::proto::data::BluetoothChannel& bluetooth_channel() const;
  PROTOBUF_MUST_USE_RESULT ::aasdk::proto::data::BluetoothChannel* release_bluetooth_channel();
  ::aasdk::proto::data::BluetoothChannel* mutable_bluetooth_channel();
  void set_allocated_bluetooth_channel(::aasdk::proto::data::BluetoothChannel* bluetooth_channel);
  private:
  const ::aasdk::proto::data::BluetoothChannel& _internal_bluetooth_channel() const;
  ::aasdk::proto::data::BluetoothChannel* _internal_mutable_bluetooth_channel();
  public:
  void unsafe_arena_set_allocated_bluetooth_channel(
      ::aasdk::proto::data::BluetoothChannel* bluetooth_channel);
  ::aasdk::proto::data::BluetoothChannel* unsafe_arena_release_bluetooth_channel();

  // optional .aasdk.proto.data.NavigationChannel navigation_channel = 8;
  bool has_navigation_channel() const;
  private:
  bool _internal_has_navigation_channel() const;
  public:
  void clear_navigation_channel();
  const ::aasdk::proto::data::NavigationChannel& navigation_channel() const;
  PROTOBUF_MUST_USE_RESULT ::aasdk::proto::data::NavigationChannel* release_navigation_channel();
  ::aasdk::proto::data::NavigationChannel* mutable_navigation_channel();
  void set_allocated_navigation_channel(::aasdk::proto::data::NavigationChannel* navigation_channel);
  private:
  const ::aasdk::proto::data::NavigationChannel& _internal_navigation_channel() const;
  ::aasdk::proto::data::NavigationChannel* _internal_mutable_navigation_channel();
  public:
  void unsafe_arena_set_allocated_navigation_channel(
      ::aasdk::proto::data::NavigationChannel* navigation_channel);
  ::aasdk::proto::data::NavigationChannel* unsafe_arena_release_navigation_channel();

  // optional .aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
  bool has_media_infochannel() const;
  private:
  bool _internal_has_media_infochannel() const;
  public:
  void clear_media_infochannel();
  const ::aasdk::proto::data::MediaInfoChannel& media_infochannel() const;
  PROTOBUF_MUST_USE_RESULT ::aasdk::proto::data::MediaInfoChannel* release_media_infochannel();
  ::aasdk::proto::data::MediaInfoChannel* mutable_media_infochannel();
  void set_allocated_media_infochannel(::aasdk::proto::data::MediaInfoChannel* media_infochannel);
  private:
  const ::aasdk::proto::data::MediaInfoChannel& _internal_media_infochannel() const;
  ::aasdk::proto::data::MediaInfoChannel* _internal_mutable_media_infochannel();
  public:
  void unsafe_arena_set_allocated_media_infochannel(
      ::aasdk::proto::data::MediaInfoChannel* media_infochannel);
  ::aasdk::proto::data::MediaInfoChannel* unsafe_arena_release_media_infochannel();

  // optional .aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
  bool has_vendor_extension_channel() const;
  private:
  bool _internal_has_vendor_extension_channel() const;
  public:
  void clear_vendor_extension_channel();
  const ::aasdk::proto::data::VendorExtensionChannel& vendor_extension_channel() const;
  PROTOBUF_MUST_USE_RESULT ::aasdk::proto::data::VendorExtensionChannel* release_vendor_extension_channel();
  ::aasdk::proto::data::VendorExtensionChannel* mutable_vendor_extension_channel();
  void set_allocated_vendor_extension_channel(::aasdk::proto::data::VendorExtensionChannel* vendor_extension_channel);
  private:
  const ::aasdk::proto::data::VendorExtensionChannel& _internal_vendor_extension_channel() const;
  ::aasdk::proto::data::VendorExtensionChannel* _internal_mutable_vendor_extension_channel();
  public:
  void unsafe_arena_set_allocated_vendor_extension_channel(
      ::aasdk::proto::data::VendorExtensionChannel* vendor_extension_channel);
  ::aasdk::proto::data::VendorExtensionChannel* unsafe_arena_release_vendor_extension_channel();

  // optional .aasdk.proto.data.WifiChannel wifi_channel = 16;
  bool has_wifi_channel() const;
  private:
  bool _internal_has_wifi_channel() const;
  public:
  void clear_wifi_channel();
  const ::aasdk::proto::data::WifiChannel& wifi_channel() const;
  PROTOBUF_MUST_USE_RESULT ::aasdk::proto::data::WifiChannel* release_wifi_channel();
  ::aasdk::proto::data::WifiChannel* mutable_wifi_channel();
  void set_allocated_wifi_channel(::aasdk::proto::data::WifiChannel* wifi_channel);
  private:
  const ::aasdk::proto::data::WifiChannel& _internal_wifi_channel() const;
  ::aasdk::proto::data::WifiChannel* _internal_mutable_wifi_channel();
  public:
  void unsafe_arena_set_allocated_wifi_channel(
      ::aasdk::proto::data::WifiChannel* wifi_channel);
  ::aasdk::proto::data::WifiChannel* unsafe_arena_release_wifi_channel();

  // required uint32 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:aasdk.proto.data.ChannelDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::aasdk::proto::data::SensorChannel* sensor_channel_;
  ::aasdk::proto::data::AVChannel* av_channel_;
  ::aasdk::proto::data::InputChannel* input_channel_;
  ::aasdk::proto::data::AVInputChannel* av_input_channel_;
  ::aasdk::proto::data::BluetoothChannel* bluetooth_channel_;
  ::aasdk::proto::data::NavigationChannel* navigation_channel_;
  ::aasdk::proto::data::MediaInfoChannel* media_infochannel_;
  ::aasdk::proto::data::VendorExtensionChannel* vendor_extension_channel_;
  ::aasdk::proto::data::WifiChannel* wifi_channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_id_;
  friend struct ::TableStruct_ChannelDescriptorData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelDescriptor

// required uint32 channel_id = 1;
inline bool ChannelDescriptor::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChannelDescriptor::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void ChannelDescriptor::clear_channel_id() {
  channel_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelDescriptor::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelDescriptor::channel_id() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.ChannelDescriptor.channel_id)
  return _internal_channel_id();
}
inline void ChannelDescriptor::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  channel_id_ = value;
}
inline void ChannelDescriptor::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.data.ChannelDescriptor.channel_id)
}

// optional .aasdk.proto.data.SensorChannel sensor_channel = 2;
inline bool ChannelDescriptor::_internal_has_sensor_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sensor_channel_ != nullptr);
  return value;
}
inline bool ChannelDescriptor::has_sensor_channel() const {
  return _internal_has_sensor_channel();
}
inline const ::aasdk::proto::data::SensorChannel& ChannelDescriptor::_internal_sensor_channel() const {
  const ::aasdk::proto::data::SensorChannel* p = sensor_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::aasdk::proto::data::SensorChannel&>(
      ::aasdk::proto::data::_SensorChannel_default_instance_);
}
inline const ::aasdk::proto::data::SensorChannel& ChannelDescriptor::sensor_channel() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.ChannelDescriptor.sensor_channel)
  return _internal_sensor_channel();
}
inline void ChannelDescriptor::unsafe_arena_set_allocated_sensor_channel(
    ::aasdk::proto::data::SensorChannel* sensor_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_channel_);
  }
  sensor_channel_ = sensor_channel;
  if (sensor_channel) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aasdk.proto.data.ChannelDescriptor.sensor_channel)
}
inline ::aasdk::proto::data::SensorChannel* ChannelDescriptor::release_sensor_channel() {
  _has_bits_[0] &= ~0x00000001u;
  ::aasdk::proto::data::SensorChannel* temp = sensor_channel_;
  sensor_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aasdk::proto::data::SensorChannel* ChannelDescriptor::unsafe_arena_release_sensor_channel() {
  // @@protoc_insertion_point(field_release:aasdk.proto.data.ChannelDescriptor.sensor_channel)
  _has_bits_[0] &= ~0x00000001u;
  ::aasdk::proto::data::SensorChannel* temp = sensor_channel_;
  sensor_channel_ = nullptr;
  return temp;
}
inline ::aasdk::proto::data::SensorChannel* ChannelDescriptor::_internal_mutable_sensor_channel() {
  _has_bits_[0] |= 0x00000001u;
  if (sensor_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::aasdk::proto::data::SensorChannel>(GetArenaForAllocation());
    sensor_channel_ = p;
  }
  return sensor_channel_;
}
inline ::aasdk::proto::data::SensorChannel* ChannelDescriptor::mutable_sensor_channel() {
  ::aasdk::proto::data::SensorChannel* _msg = _internal_mutable_sensor_channel();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.data.ChannelDescriptor.sensor_channel)
  return _msg;
}
inline void ChannelDescriptor::set_allocated_sensor_channel(::aasdk::proto::data::SensorChannel* sensor_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_channel_);
  }
  if (sensor_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensor_channel));
    if (message_arena != submessage_arena) {
      sensor_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensor_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sensor_channel_ = sensor_channel;
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.data.ChannelDescriptor.sensor_channel)
}

// optional .aasdk.proto.data.AVChannel av_channel = 3;
inline bool ChannelDescriptor::_internal_has_av_channel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || av_channel_ != nullptr);
  return value;
}
inline bool ChannelDescriptor::has_av_channel() const {
  return _internal_has_av_channel();
}
inline const ::aasdk::proto::data::AVChannel& ChannelDescriptor::_internal_av_channel() const {
  const ::aasdk::proto::data::AVChannel* p = av_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::aasdk::proto::data::AVChannel&>(
      ::aasdk::proto::data::_AVChannel_default_instance_);
}
inline const ::aasdk::proto::data::AVChannel& ChannelDescriptor::av_channel() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.ChannelDescriptor.av_channel)
  return _internal_av_channel();
}
inline void ChannelDescriptor::unsafe_arena_set_allocated_av_channel(
    ::aasdk::proto::data::AVChannel* av_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(av_channel_);
  }
  av_channel_ = av_channel;
  if (av_channel) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aasdk.proto.data.ChannelDescriptor.av_channel)
}
inline ::aasdk::proto::data::AVChannel* ChannelDescriptor::release_av_channel() {
  _has_bits_[0] &= ~0x00000002u;
  ::aasdk::proto::data::AVChannel* temp = av_channel_;
  av_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aasdk::proto::data::AVChannel* ChannelDescriptor::unsafe_arena_release_av_channel() {
  // @@protoc_insertion_point(field_release:aasdk.proto.data.ChannelDescriptor.av_channel)
  _has_bits_[0] &= ~0x00000002u;
  ::aasdk::proto::data::AVChannel* temp = av_channel_;
  av_channel_ = nullptr;
  return temp;
}
inline ::aasdk::proto::data::AVChannel* ChannelDescriptor::_internal_mutable_av_channel() {
  _has_bits_[0] |= 0x00000002u;
  if (av_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::aasdk::proto::data::AVChannel>(GetArenaForAllocation());
    av_channel_ = p;
  }
  return av_channel_;
}
inline ::aasdk::proto::data::AVChannel* ChannelDescriptor::mutable_av_channel() {
  ::aasdk::proto::data::AVChannel* _msg = _internal_mutable_av_channel();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.data.ChannelDescriptor.av_channel)
  return _msg;
}
inline void ChannelDescriptor::set_allocated_av_channel(::aasdk::proto::data::AVChannel* av_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(av_channel_);
  }
  if (av_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(av_channel));
    if (message_arena != submessage_arena) {
      av_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, av_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  av_channel_ = av_channel;
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.data.ChannelDescriptor.av_channel)
}

// optional .aasdk.proto.data.InputChannel input_channel = 4;
inline bool ChannelDescriptor::_internal_has_input_channel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || input_channel_ != nullptr);
  return value;
}
inline bool ChannelDescriptor::has_input_channel() const {
  return _internal_has_input_channel();
}
inline const ::aasdk::proto::data::InputChannel& ChannelDescriptor::_internal_input_channel() const {
  const ::aasdk::proto::data::InputChannel* p = input_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::aasdk::proto::data::InputChannel&>(
      ::aasdk::proto::data::_InputChannel_default_instance_);
}
inline const ::aasdk::proto::data::InputChannel& ChannelDescriptor::input_channel() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.ChannelDescriptor.input_channel)
  return _internal_input_channel();
}
inline void ChannelDescriptor::unsafe_arena_set_allocated_input_channel(
    ::aasdk::proto::data::InputChannel* input_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_channel_);
  }
  input_channel_ = input_channel;
  if (input_channel) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aasdk.proto.data.ChannelDescriptor.input_channel)
}
inline ::aasdk::proto::data::InputChannel* ChannelDescriptor::release_input_channel() {
  _has_bits_[0] &= ~0x00000004u;
  ::aasdk::proto::data::InputChannel* temp = input_channel_;
  input_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aasdk::proto::data::InputChannel* ChannelDescriptor::unsafe_arena_release_input_channel() {
  // @@protoc_insertion_point(field_release:aasdk.proto.data.ChannelDescriptor.input_channel)
  _has_bits_[0] &= ~0x00000004u;
  ::aasdk::proto::data::InputChannel* temp = input_channel_;
  input_channel_ = nullptr;
  return temp;
}
inline ::aasdk::proto::data::InputChannel* ChannelDescriptor::_internal_mutable_input_channel() {
  _has_bits_[0] |= 0x00000004u;
  if (input_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::aasdk::proto::data::InputChannel>(GetArenaForAllocation());
    input_channel_ = p;
  }
  return input_channel_;
}
inline ::aasdk::proto::data::InputChannel* ChannelDescriptor::mutable_input_channel() {
  ::aasdk::proto::data::InputChannel* _msg = _internal_mutable_input_channel();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.data.ChannelDescriptor.input_channel)
  return _msg;
}
inline void ChannelDescriptor::set_allocated_input_channel(::aasdk::proto::data::InputChannel* input_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_channel_);
  }
  if (input_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_channel));
    if (message_arena != submessage_arena) {
      input_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  input_channel_ = input_channel;
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.data.ChannelDescriptor.input_channel)
}

// optional .aasdk.proto.data.AVInputChannel av_input_channel = 5;
inline bool ChannelDescriptor::_internal_has_av_input_channel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || av_input_channel_ != nullptr);
  return value;
}
inline bool ChannelDescriptor::has_av_input_channel() const {
  return _internal_has_av_input_channel();
}
inline const ::aasdk::proto::data::AVInputChannel& ChannelDescriptor::_internal_av_input_channel() const {
  const ::aasdk::proto::data::AVInputChannel* p = av_input_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::aasdk::proto::data::AVInputChannel&>(
      ::aasdk::proto::data::_AVInputChannel_default_instance_);
}
inline const ::aasdk::proto::data::AVInputChannel& ChannelDescriptor::av_input_channel() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.ChannelDescriptor.av_input_channel)
  return _internal_av_input_channel();
}
inline void ChannelDescriptor::unsafe_arena_set_allocated_av_input_channel(
    ::aasdk::proto::data::AVInputChannel* av_input_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(av_input_channel_);
  }
  av_input_channel_ = av_input_channel;
  if (av_input_channel) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aasdk.proto.data.ChannelDescriptor.av_input_channel)
}
inline ::aasdk::proto::data::AVInputChannel* ChannelDescriptor::release_av_input_channel() {
  _has_bits_[0] &= ~0x00000008u;
  ::aasdk::proto::data::AVInputChannel* temp = av_input_channel_;
  av_input_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aasdk::proto::data::AVInputChannel* ChannelDescriptor::unsafe_arena_release_av_input_channel() {
  // @@protoc_insertion_point(field_release:aasdk.proto.data.ChannelDescriptor.av_input_channel)
  _has_bits_[0] &= ~0x00000008u;
  ::aasdk::proto::data::AVInputChannel* temp = av_input_channel_;
  av_input_channel_ = nullptr;
  return temp;
}
inline ::aasdk::proto::data::AVInputChannel* ChannelDescriptor::_internal_mutable_av_input_channel() {
  _has_bits_[0] |= 0x00000008u;
  if (av_input_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::aasdk::proto::data::AVInputChannel>(GetArenaForAllocation());
    av_input_channel_ = p;
  }
  return av_input_channel_;
}
inline ::aasdk::proto::data::AVInputChannel* ChannelDescriptor::mutable_av_input_channel() {
  ::aasdk::proto::data::AVInputChannel* _msg = _internal_mutable_av_input_channel();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.data.ChannelDescriptor.av_input_channel)
  return _msg;
}
inline void ChannelDescriptor::set_allocated_av_input_channel(::aasdk::proto::data::AVInputChannel* av_input_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(av_input_channel_);
  }
  if (av_input_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(av_input_channel));
    if (message_arena != submessage_arena) {
      av_input_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, av_input_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  av_input_channel_ = av_input_channel;
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.data.ChannelDescriptor.av_input_channel)
}

// optional .aasdk.proto.data.BluetoothChannel bluetooth_channel = 6;
inline bool ChannelDescriptor::_internal_has_bluetooth_channel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || bluetooth_channel_ != nullptr);
  return value;
}
inline bool ChannelDescriptor::has_bluetooth_channel() const {
  return _internal_has_bluetooth_channel();
}
inline const ::aasdk::proto::data::BluetoothChannel& ChannelDescriptor::_internal_bluetooth_channel() const {
  const ::aasdk::proto::data::BluetoothChannel* p = bluetooth_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::aasdk::proto::data::BluetoothChannel&>(
      ::aasdk::proto::data::_BluetoothChannel_default_instance_);
}
inline const ::aasdk::proto::data::BluetoothChannel& ChannelDescriptor::bluetooth_channel() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.ChannelDescriptor.bluetooth_channel)
  return _internal_bluetooth_channel();
}
inline void ChannelDescriptor::unsafe_arena_set_allocated_bluetooth_channel(
    ::aasdk::proto::data::BluetoothChannel* bluetooth_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bluetooth_channel_);
  }
  bluetooth_channel_ = bluetooth_channel;
  if (bluetooth_channel) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aasdk.proto.data.ChannelDescriptor.bluetooth_channel)
}
inline ::aasdk::proto::data::BluetoothChannel* ChannelDescriptor::release_bluetooth_channel() {
  _has_bits_[0] &= ~0x00000010u;
  ::aasdk::proto::data::BluetoothChannel* temp = bluetooth_channel_;
  bluetooth_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aasdk::proto::data::BluetoothChannel* ChannelDescriptor::unsafe_arena_release_bluetooth_channel() {
  // @@protoc_insertion_point(field_release:aasdk.proto.data.ChannelDescriptor.bluetooth_channel)
  _has_bits_[0] &= ~0x00000010u;
  ::aasdk::proto::data::BluetoothChannel* temp = bluetooth_channel_;
  bluetooth_channel_ = nullptr;
  return temp;
}
inline ::aasdk::proto::data::BluetoothChannel* ChannelDescriptor::_internal_mutable_bluetooth_channel() {
  _has_bits_[0] |= 0x00000010u;
  if (bluetooth_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::aasdk::proto::data::BluetoothChannel>(GetArenaForAllocation());
    bluetooth_channel_ = p;
  }
  return bluetooth_channel_;
}
inline ::aasdk::proto::data::BluetoothChannel* ChannelDescriptor::mutable_bluetooth_channel() {
  ::aasdk::proto::data::BluetoothChannel* _msg = _internal_mutable_bluetooth_channel();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.data.ChannelDescriptor.bluetooth_channel)
  return _msg;
}
inline void ChannelDescriptor::set_allocated_bluetooth_channel(::aasdk::proto::data::BluetoothChannel* bluetooth_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bluetooth_channel_);
  }
  if (bluetooth_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bluetooth_channel));
    if (message_arena != submessage_arena) {
      bluetooth_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bluetooth_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bluetooth_channel_ = bluetooth_channel;
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.data.ChannelDescriptor.bluetooth_channel)
}

// optional .aasdk.proto.data.NavigationChannel navigation_channel = 8;
inline bool ChannelDescriptor::_internal_has_navigation_channel() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || navigation_channel_ != nullptr);
  return value;
}
inline bool ChannelDescriptor::has_navigation_channel() const {
  return _internal_has_navigation_channel();
}
inline const ::aasdk::proto::data::NavigationChannel& ChannelDescriptor::_internal_navigation_channel() const {
  const ::aasdk::proto::data::NavigationChannel* p = navigation_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::aasdk::proto::data::NavigationChannel&>(
      ::aasdk::proto::data::_NavigationChannel_default_instance_);
}
inline const ::aasdk::proto::data::NavigationChannel& ChannelDescriptor::navigation_channel() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.ChannelDescriptor.navigation_channel)
  return _internal_navigation_channel();
}
inline void ChannelDescriptor::unsafe_arena_set_allocated_navigation_channel(
    ::aasdk::proto::data::NavigationChannel* navigation_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_channel_);
  }
  navigation_channel_ = navigation_channel;
  if (navigation_channel) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aasdk.proto.data.ChannelDescriptor.navigation_channel)
}
inline ::aasdk::proto::data::NavigationChannel* ChannelDescriptor::release_navigation_channel() {
  _has_bits_[0] &= ~0x00000020u;
  ::aasdk::proto::data::NavigationChannel* temp = navigation_channel_;
  navigation_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aasdk::proto::data::NavigationChannel* ChannelDescriptor::unsafe_arena_release_navigation_channel() {
  // @@protoc_insertion_point(field_release:aasdk.proto.data.ChannelDescriptor.navigation_channel)
  _has_bits_[0] &= ~0x00000020u;
  ::aasdk::proto::data::NavigationChannel* temp = navigation_channel_;
  navigation_channel_ = nullptr;
  return temp;
}
inline ::aasdk::proto::data::NavigationChannel* ChannelDescriptor::_internal_mutable_navigation_channel() {
  _has_bits_[0] |= 0x00000020u;
  if (navigation_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::aasdk::proto::data::NavigationChannel>(GetArenaForAllocation());
    navigation_channel_ = p;
  }
  return navigation_channel_;
}
inline ::aasdk::proto::data::NavigationChannel* ChannelDescriptor::mutable_navigation_channel() {
  ::aasdk::proto::data::NavigationChannel* _msg = _internal_mutable_navigation_channel();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.data.ChannelDescriptor.navigation_channel)
  return _msg;
}
inline void ChannelDescriptor::set_allocated_navigation_channel(::aasdk::proto::data::NavigationChannel* navigation_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_channel_);
  }
  if (navigation_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_channel));
    if (message_arena != submessage_arena) {
      navigation_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  navigation_channel_ = navigation_channel;
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.data.ChannelDescriptor.navigation_channel)
}

// optional .aasdk.proto.data.MediaInfoChannel media_infoChannel = 9;
inline bool ChannelDescriptor::_internal_has_media_infochannel() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || media_infochannel_ != nullptr);
  return value;
}
inline bool ChannelDescriptor::has_media_infochannel() const {
  return _internal_has_media_infochannel();
}
inline const ::aasdk::proto::data::MediaInfoChannel& ChannelDescriptor::_internal_media_infochannel() const {
  const ::aasdk::proto::data::MediaInfoChannel* p = media_infochannel_;
  return p != nullptr ? *p : reinterpret_cast<const ::aasdk::proto::data::MediaInfoChannel&>(
      ::aasdk::proto::data::_MediaInfoChannel_default_instance_);
}
inline const ::aasdk::proto::data::MediaInfoChannel& ChannelDescriptor::media_infochannel() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.ChannelDescriptor.media_infoChannel)
  return _internal_media_infochannel();
}
inline void ChannelDescriptor::unsafe_arena_set_allocated_media_infochannel(
    ::aasdk::proto::data::MediaInfoChannel* media_infochannel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_infochannel_);
  }
  media_infochannel_ = media_infochannel;
  if (media_infochannel) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aasdk.proto.data.ChannelDescriptor.media_infoChannel)
}
inline ::aasdk::proto::data::MediaInfoChannel* ChannelDescriptor::release_media_infochannel() {
  _has_bits_[0] &= ~0x00000040u;
  ::aasdk::proto::data::MediaInfoChannel* temp = media_infochannel_;
  media_infochannel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aasdk::proto::data::MediaInfoChannel* ChannelDescriptor::unsafe_arena_release_media_infochannel() {
  // @@protoc_insertion_point(field_release:aasdk.proto.data.ChannelDescriptor.media_infoChannel)
  _has_bits_[0] &= ~0x00000040u;
  ::aasdk::proto::data::MediaInfoChannel* temp = media_infochannel_;
  media_infochannel_ = nullptr;
  return temp;
}
inline ::aasdk::proto::data::MediaInfoChannel* ChannelDescriptor::_internal_mutable_media_infochannel() {
  _has_bits_[0] |= 0x00000040u;
  if (media_infochannel_ == nullptr) {
    auto* p = CreateMaybeMessage<::aasdk::proto::data::MediaInfoChannel>(GetArenaForAllocation());
    media_infochannel_ = p;
  }
  return media_infochannel_;
}
inline ::aasdk::proto::data::MediaInfoChannel* ChannelDescriptor::mutable_media_infochannel() {
  ::aasdk::proto::data::MediaInfoChannel* _msg = _internal_mutable_media_infochannel();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.data.ChannelDescriptor.media_infoChannel)
  return _msg;
}
inline void ChannelDescriptor::set_allocated_media_infochannel(::aasdk::proto::data::MediaInfoChannel* media_infochannel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_infochannel_);
  }
  if (media_infochannel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_infochannel));
    if (message_arena != submessage_arena) {
      media_infochannel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_infochannel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  media_infochannel_ = media_infochannel;
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.data.ChannelDescriptor.media_infoChannel)
}

// optional .aasdk.proto.data.VendorExtensionChannel vendor_extension_channel = 12;
inline bool ChannelDescriptor::_internal_has_vendor_extension_channel() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || vendor_extension_channel_ != nullptr);
  return value;
}
inline bool ChannelDescriptor::has_vendor_extension_channel() const {
  return _internal_has_vendor_extension_channel();
}
inline const ::aasdk::proto::data::VendorExtensionChannel& ChannelDescriptor::_internal_vendor_extension_channel() const {
  const ::aasdk::proto::data::VendorExtensionChannel* p = vendor_extension_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::aasdk::proto::data::VendorExtensionChannel&>(
      ::aasdk::proto::data::_VendorExtensionChannel_default_instance_);
}
inline const ::aasdk::proto::data::VendorExtensionChannel& ChannelDescriptor::vendor_extension_channel() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.ChannelDescriptor.vendor_extension_channel)
  return _internal_vendor_extension_channel();
}
inline void ChannelDescriptor::unsafe_arena_set_allocated_vendor_extension_channel(
    ::aasdk::proto::data::VendorExtensionChannel* vendor_extension_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vendor_extension_channel_);
  }
  vendor_extension_channel_ = vendor_extension_channel;
  if (vendor_extension_channel) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aasdk.proto.data.ChannelDescriptor.vendor_extension_channel)
}
inline ::aasdk::proto::data::VendorExtensionChannel* ChannelDescriptor::release_vendor_extension_channel() {
  _has_bits_[0] &= ~0x00000080u;
  ::aasdk::proto::data::VendorExtensionChannel* temp = vendor_extension_channel_;
  vendor_extension_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aasdk::proto::data::VendorExtensionChannel* ChannelDescriptor::unsafe_arena_release_vendor_extension_channel() {
  // @@protoc_insertion_point(field_release:aasdk.proto.data.ChannelDescriptor.vendor_extension_channel)
  _has_bits_[0] &= ~0x00000080u;
  ::aasdk::proto::data::VendorExtensionChannel* temp = vendor_extension_channel_;
  vendor_extension_channel_ = nullptr;
  return temp;
}
inline ::aasdk::proto::data::VendorExtensionChannel* ChannelDescriptor::_internal_mutable_vendor_extension_channel() {
  _has_bits_[0] |= 0x00000080u;
  if (vendor_extension_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::aasdk::proto::data::VendorExtensionChannel>(GetArenaForAllocation());
    vendor_extension_channel_ = p;
  }
  return vendor_extension_channel_;
}
inline ::aasdk::proto::data::VendorExtensionChannel* ChannelDescriptor::mutable_vendor_extension_channel() {
  ::aasdk::proto::data::VendorExtensionChannel* _msg = _internal_mutable_vendor_extension_channel();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.data.ChannelDescriptor.vendor_extension_channel)
  return _msg;
}
inline void ChannelDescriptor::set_allocated_vendor_extension_channel(::aasdk::proto::data::VendorExtensionChannel* vendor_extension_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vendor_extension_channel_);
  }
  if (vendor_extension_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vendor_extension_channel));
    if (message_arena != submessage_arena) {
      vendor_extension_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vendor_extension_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  vendor_extension_channel_ = vendor_extension_channel;
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.data.ChannelDescriptor.vendor_extension_channel)
}

// optional .aasdk.proto.data.WifiChannel wifi_channel = 16;
inline bool ChannelDescriptor::_internal_has_wifi_channel() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || wifi_channel_ != nullptr);
  return value;
}
inline bool ChannelDescriptor::has_wifi_channel() const {
  return _internal_has_wifi_channel();
}
inline const ::aasdk::proto::data::WifiChannel& ChannelDescriptor::_internal_wifi_channel() const {
  const ::aasdk::proto::data::WifiChannel* p = wifi_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::aasdk::proto::data::WifiChannel&>(
      ::aasdk::proto::data::_WifiChannel_default_instance_);
}
inline const ::aasdk::proto::data::WifiChannel& ChannelDescriptor::wifi_channel() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.ChannelDescriptor.wifi_channel)
  return _internal_wifi_channel();
}
inline void ChannelDescriptor::unsafe_arena_set_allocated_wifi_channel(
    ::aasdk::proto::data::WifiChannel* wifi_channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wifi_channel_);
  }
  wifi_channel_ = wifi_channel;
  if (wifi_channel) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aasdk.proto.data.ChannelDescriptor.wifi_channel)
}
inline ::aasdk::proto::data::WifiChannel* ChannelDescriptor::release_wifi_channel() {
  _has_bits_[0] &= ~0x00000100u;
  ::aasdk::proto::data::WifiChannel* temp = wifi_channel_;
  wifi_channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aasdk::proto::data::WifiChannel* ChannelDescriptor::unsafe_arena_release_wifi_channel() {
  // @@protoc_insertion_point(field_release:aasdk.proto.data.ChannelDescriptor.wifi_channel)
  _has_bits_[0] &= ~0x00000100u;
  ::aasdk::proto::data::WifiChannel* temp = wifi_channel_;
  wifi_channel_ = nullptr;
  return temp;
}
inline ::aasdk::proto::data::WifiChannel* ChannelDescriptor::_internal_mutable_wifi_channel() {
  _has_bits_[0] |= 0x00000100u;
  if (wifi_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::aasdk::proto::data::WifiChannel>(GetArenaForAllocation());
    wifi_channel_ = p;
  }
  return wifi_channel_;
}
inline ::aasdk::proto::data::WifiChannel* ChannelDescriptor::mutable_wifi_channel() {
  ::aasdk::proto::data::WifiChannel* _msg = _internal_mutable_wifi_channel();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.data.ChannelDescriptor.wifi_channel)
  return _msg;
}
inline void ChannelDescriptor::set_allocated_wifi_channel(::aasdk::proto::data::WifiChannel* wifi_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wifi_channel_);
  }
  if (wifi_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wifi_channel));
    if (message_arena != submessage_arena) {
      wifi_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi_channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  wifi_channel_ = wifi_channel;
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.data.ChannelDescriptor.wifi_channel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace aasdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChannelDescriptorData_2eproto
