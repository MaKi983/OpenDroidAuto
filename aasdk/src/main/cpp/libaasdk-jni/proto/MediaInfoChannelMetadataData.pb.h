// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MediaInfoChannelMetadataData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MediaInfoChannelMetadataData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MediaInfoChannelMetadataData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MediaInfoChannelMetadataData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MediaInfoChannelMetadataData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MediaInfoChannelMetadataData_2eproto;
namespace aasdk {
namespace proto {
namespace messages {
class MediaInfoChannelMetadataData;
struct MediaInfoChannelMetadataDataDefaultTypeInternal;
extern MediaInfoChannelMetadataDataDefaultTypeInternal _MediaInfoChannelMetadataData_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> ::aasdk::proto::messages::MediaInfoChannelMetadataData* Arena::CreateMaybeMessage<::aasdk::proto::messages::MediaInfoChannelMetadataData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class MediaInfoChannelMetadataData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aasdk.proto.messages.MediaInfoChannelMetadataData) */ {
 public:
  inline MediaInfoChannelMetadataData() : MediaInfoChannelMetadataData(nullptr) {}
  ~MediaInfoChannelMetadataData() override;
  explicit constexpr MediaInfoChannelMetadataData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaInfoChannelMetadataData(const MediaInfoChannelMetadataData& from);
  MediaInfoChannelMetadataData(MediaInfoChannelMetadataData&& from) noexcept
    : MediaInfoChannelMetadataData() {
    *this = ::std::move(from);
  }

  inline MediaInfoChannelMetadataData& operator=(const MediaInfoChannelMetadataData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaInfoChannelMetadataData& operator=(MediaInfoChannelMetadataData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaInfoChannelMetadataData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaInfoChannelMetadataData* internal_default_instance() {
    return reinterpret_cast<const MediaInfoChannelMetadataData*>(
               &_MediaInfoChannelMetadataData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MediaInfoChannelMetadataData& a, MediaInfoChannelMetadataData& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaInfoChannelMetadataData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaInfoChannelMetadataData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaInfoChannelMetadataData* New() const final {
    return new MediaInfoChannelMetadataData();
  }

  MediaInfoChannelMetadataData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaInfoChannelMetadataData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MediaInfoChannelMetadataData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MediaInfoChannelMetadataData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaInfoChannelMetadataData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aasdk.proto.messages.MediaInfoChannelMetadataData";
  }
  protected:
  explicit MediaInfoChannelMetadataData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackNameFieldNumber = 1,
    kArtistNameFieldNumber = 2,
    kAlbumNameFieldNumber = 3,
    kAlbumArtFieldNumber = 4,
    kTrackLengthFieldNumber = 6,
    kUnknown1FieldNumber = 7,
  };
  // optional string track_name = 1;
  bool has_track_name() const;
  private:
  bool _internal_has_track_name() const;
  public:
  void clear_track_name();
  const std::string& track_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_track_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_track_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_track_name();
  void set_allocated_track_name(std::string* track_name);
  private:
  const std::string& _internal_track_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_track_name(const std::string& value);
  std::string* _internal_mutable_track_name();
  public:

  // optional string artist_name = 2;
  bool has_artist_name() const;
  private:
  bool _internal_has_artist_name() const;
  public:
  void clear_artist_name();
  const std::string& artist_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_artist_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_artist_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_artist_name();
  void set_allocated_artist_name(std::string* artist_name);
  private:
  const std::string& _internal_artist_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_artist_name(const std::string& value);
  std::string* _internal_mutable_artist_name();
  public:

  // optional string album_name = 3;
  bool has_album_name() const;
  private:
  bool _internal_has_album_name() const;
  public:
  void clear_album_name();
  const std::string& album_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_album_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_album_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_album_name();
  void set_allocated_album_name(std::string* album_name);
  private:
  const std::string& _internal_album_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_album_name(const std::string& value);
  std::string* _internal_mutable_album_name();
  public:

  // optional bytes album_art = 4;
  bool has_album_art() const;
  private:
  bool _internal_has_album_art() const;
  public:
  void clear_album_art();
  const std::string& album_art() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_album_art(ArgT0&& arg0, ArgT... args);
  std::string* mutable_album_art();
  PROTOBUF_MUST_USE_RESULT std::string* release_album_art();
  void set_allocated_album_art(std::string* album_art);
  private:
  const std::string& _internal_album_art() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_album_art(const std::string& value);
  std::string* _internal_mutable_album_art();
  public:

  // required int32 track_length = 6;
  bool has_track_length() const;
  private:
  bool _internal_has_track_length() const;
  public:
  void clear_track_length();
  ::PROTOBUF_NAMESPACE_ID::int32 track_length() const;
  void set_track_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_track_length() const;
  void _internal_set_track_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 unknown1 = 7;
  bool has_unknown1() const;
  private:
  bool _internal_has_unknown1() const;
  public:
  void clear_unknown1();
  ::PROTOBUF_NAMESPACE_ID::int32 unknown1() const;
  void set_unknown1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unknown1() const;
  void _internal_set_unknown1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:aasdk.proto.messages.MediaInfoChannelMetadataData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr artist_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr album_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr album_art_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 unknown1_;
  friend struct ::TableStruct_MediaInfoChannelMetadataData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MediaInfoChannelMetadataData

// optional string track_name = 1;
inline bool MediaInfoChannelMetadataData::_internal_has_track_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MediaInfoChannelMetadataData::has_track_name() const {
  return _internal_has_track_name();
}
inline void MediaInfoChannelMetadataData::clear_track_name() {
  track_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MediaInfoChannelMetadataData::track_name() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.messages.MediaInfoChannelMetadataData.track_name)
  return _internal_track_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MediaInfoChannelMetadataData::set_track_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 track_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aasdk.proto.messages.MediaInfoChannelMetadataData.track_name)
}
inline std::string* MediaInfoChannelMetadataData::mutable_track_name() {
  std::string* _s = _internal_mutable_track_name();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.messages.MediaInfoChannelMetadataData.track_name)
  return _s;
}
inline const std::string& MediaInfoChannelMetadataData::_internal_track_name() const {
  return track_name_.Get();
}
inline void MediaInfoChannelMetadataData::_internal_set_track_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  track_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MediaInfoChannelMetadataData::_internal_mutable_track_name() {
  _has_bits_[0] |= 0x00000001u;
  return track_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MediaInfoChannelMetadataData::release_track_name() {
  // @@protoc_insertion_point(field_release:aasdk.proto.messages.MediaInfoChannelMetadataData.track_name)
  if (!_internal_has_track_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return track_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MediaInfoChannelMetadataData::set_allocated_track_name(std::string* track_name) {
  if (track_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  track_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.messages.MediaInfoChannelMetadataData.track_name)
}

// optional string artist_name = 2;
inline bool MediaInfoChannelMetadataData::_internal_has_artist_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MediaInfoChannelMetadataData::has_artist_name() const {
  return _internal_has_artist_name();
}
inline void MediaInfoChannelMetadataData::clear_artist_name() {
  artist_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MediaInfoChannelMetadataData::artist_name() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.messages.MediaInfoChannelMetadataData.artist_name)
  return _internal_artist_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MediaInfoChannelMetadataData::set_artist_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 artist_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aasdk.proto.messages.MediaInfoChannelMetadataData.artist_name)
}
inline std::string* MediaInfoChannelMetadataData::mutable_artist_name() {
  std::string* _s = _internal_mutable_artist_name();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.messages.MediaInfoChannelMetadataData.artist_name)
  return _s;
}
inline const std::string& MediaInfoChannelMetadataData::_internal_artist_name() const {
  return artist_name_.Get();
}
inline void MediaInfoChannelMetadataData::_internal_set_artist_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  artist_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MediaInfoChannelMetadataData::_internal_mutable_artist_name() {
  _has_bits_[0] |= 0x00000002u;
  return artist_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MediaInfoChannelMetadataData::release_artist_name() {
  // @@protoc_insertion_point(field_release:aasdk.proto.messages.MediaInfoChannelMetadataData.artist_name)
  if (!_internal_has_artist_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return artist_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MediaInfoChannelMetadataData::set_allocated_artist_name(std::string* artist_name) {
  if (artist_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  artist_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), artist_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.messages.MediaInfoChannelMetadataData.artist_name)
}

// optional string album_name = 3;
inline bool MediaInfoChannelMetadataData::_internal_has_album_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MediaInfoChannelMetadataData::has_album_name() const {
  return _internal_has_album_name();
}
inline void MediaInfoChannelMetadataData::clear_album_name() {
  album_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MediaInfoChannelMetadataData::album_name() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.messages.MediaInfoChannelMetadataData.album_name)
  return _internal_album_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MediaInfoChannelMetadataData::set_album_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 album_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aasdk.proto.messages.MediaInfoChannelMetadataData.album_name)
}
inline std::string* MediaInfoChannelMetadataData::mutable_album_name() {
  std::string* _s = _internal_mutable_album_name();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.messages.MediaInfoChannelMetadataData.album_name)
  return _s;
}
inline const std::string& MediaInfoChannelMetadataData::_internal_album_name() const {
  return album_name_.Get();
}
inline void MediaInfoChannelMetadataData::_internal_set_album_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  album_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MediaInfoChannelMetadataData::_internal_mutable_album_name() {
  _has_bits_[0] |= 0x00000004u;
  return album_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MediaInfoChannelMetadataData::release_album_name() {
  // @@protoc_insertion_point(field_release:aasdk.proto.messages.MediaInfoChannelMetadataData.album_name)
  if (!_internal_has_album_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return album_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MediaInfoChannelMetadataData::set_allocated_album_name(std::string* album_name) {
  if (album_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  album_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), album_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.messages.MediaInfoChannelMetadataData.album_name)
}

// optional bytes album_art = 4;
inline bool MediaInfoChannelMetadataData::_internal_has_album_art() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MediaInfoChannelMetadataData::has_album_art() const {
  return _internal_has_album_art();
}
inline void MediaInfoChannelMetadataData::clear_album_art() {
  album_art_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MediaInfoChannelMetadataData::album_art() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.messages.MediaInfoChannelMetadataData.album_art)
  return _internal_album_art();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MediaInfoChannelMetadataData::set_album_art(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 album_art_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aasdk.proto.messages.MediaInfoChannelMetadataData.album_art)
}
inline std::string* MediaInfoChannelMetadataData::mutable_album_art() {
  std::string* _s = _internal_mutable_album_art();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.messages.MediaInfoChannelMetadataData.album_art)
  return _s;
}
inline const std::string& MediaInfoChannelMetadataData::_internal_album_art() const {
  return album_art_.Get();
}
inline void MediaInfoChannelMetadataData::_internal_set_album_art(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  album_art_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MediaInfoChannelMetadataData::_internal_mutable_album_art() {
  _has_bits_[0] |= 0x00000008u;
  return album_art_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MediaInfoChannelMetadataData::release_album_art() {
  // @@protoc_insertion_point(field_release:aasdk.proto.messages.MediaInfoChannelMetadataData.album_art)
  if (!_internal_has_album_art()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return album_art_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MediaInfoChannelMetadataData::set_allocated_album_art(std::string* album_art) {
  if (album_art != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  album_art_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), album_art,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.messages.MediaInfoChannelMetadataData.album_art)
}

// required int32 track_length = 6;
inline bool MediaInfoChannelMetadataData::_internal_has_track_length() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MediaInfoChannelMetadataData::has_track_length() const {
  return _internal_has_track_length();
}
inline void MediaInfoChannelMetadataData::clear_track_length() {
  track_length_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MediaInfoChannelMetadataData::_internal_track_length() const {
  return track_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MediaInfoChannelMetadataData::track_length() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.messages.MediaInfoChannelMetadataData.track_length)
  return _internal_track_length();
}
inline void MediaInfoChannelMetadataData::_internal_set_track_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  track_length_ = value;
}
inline void MediaInfoChannelMetadataData::set_track_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_track_length(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.messages.MediaInfoChannelMetadataData.track_length)
}

// required int32 unknown1 = 7;
inline bool MediaInfoChannelMetadataData::_internal_has_unknown1() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MediaInfoChannelMetadataData::has_unknown1() const {
  return _internal_has_unknown1();
}
inline void MediaInfoChannelMetadataData::clear_unknown1() {
  unknown1_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MediaInfoChannelMetadataData::_internal_unknown1() const {
  return unknown1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MediaInfoChannelMetadataData::unknown1() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.messages.MediaInfoChannelMetadataData.unknown1)
  return _internal_unknown1();
}
inline void MediaInfoChannelMetadataData::_internal_set_unknown1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  unknown1_ = value;
}
inline void MediaInfoChannelMetadataData::set_unknown1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unknown1(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.messages.MediaInfoChannelMetadataData.unknown1)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace proto
}  // namespace aasdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MediaInfoChannelMetadataData_2eproto
