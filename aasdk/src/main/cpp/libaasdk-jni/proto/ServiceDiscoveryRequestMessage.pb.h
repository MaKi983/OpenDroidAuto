// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDiscoveryRequestMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServiceDiscoveryRequestMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServiceDiscoveryRequestMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServiceDiscoveryRequestMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServiceDiscoveryRequestMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceDiscoveryRequestMessage_2eproto;
namespace aasdk {
namespace proto {
namespace messages {
class ServiceDiscoveryRequest;
struct ServiceDiscoveryRequestDefaultTypeInternal;
extern ServiceDiscoveryRequestDefaultTypeInternal _ServiceDiscoveryRequest_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> ::aasdk::proto::messages::ServiceDiscoveryRequest* Arena::CreateMaybeMessage<::aasdk::proto::messages::ServiceDiscoveryRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class ServiceDiscoveryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aasdk.proto.messages.ServiceDiscoveryRequest) */ {
 public:
  inline ServiceDiscoveryRequest() : ServiceDiscoveryRequest(nullptr) {}
  ~ServiceDiscoveryRequest() override;
  explicit constexpr ServiceDiscoveryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceDiscoveryRequest(const ServiceDiscoveryRequest& from);
  ServiceDiscoveryRequest(ServiceDiscoveryRequest&& from) noexcept
    : ServiceDiscoveryRequest() {
    *this = ::std::move(from);
  }

  inline ServiceDiscoveryRequest& operator=(const ServiceDiscoveryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceDiscoveryRequest& operator=(ServiceDiscoveryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceDiscoveryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceDiscoveryRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceDiscoveryRequest*>(
               &_ServiceDiscoveryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceDiscoveryRequest& a, ServiceDiscoveryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceDiscoveryRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceDiscoveryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceDiscoveryRequest* New() const final {
    return new ServiceDiscoveryRequest();
  }

  ServiceDiscoveryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceDiscoveryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceDiscoveryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceDiscoveryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDiscoveryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aasdk.proto.messages.ServiceDiscoveryRequest";
  }
  protected:
  explicit ServiceDiscoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 4,
    kDeviceBrandFieldNumber = 5,
  };
  // required string device_name = 4;
  bool has_device_name() const;
  private:
  bool _internal_has_device_name() const;
  public:
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // required string device_brand = 5;
  bool has_device_brand() const;
  private:
  bool _internal_has_device_brand() const;
  public:
  void clear_device_brand();
  const std::string& device_brand() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_brand(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_brand();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_brand();
  void set_allocated_device_brand(std::string* device_brand);
  private:
  const std::string& _internal_device_brand() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_brand(const std::string& value);
  std::string* _internal_mutable_device_brand();
  public:

  // @@protoc_insertion_point(class_scope:aasdk.proto.messages.ServiceDiscoveryRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_brand_;
  friend struct ::TableStruct_ServiceDiscoveryRequestMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceDiscoveryRequest

// required string device_name = 4;
inline bool ServiceDiscoveryRequest::_internal_has_device_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServiceDiscoveryRequest::has_device_name() const {
  return _internal_has_device_name();
}
inline void ServiceDiscoveryRequest::clear_device_name() {
  device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceDiscoveryRequest::device_name() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDiscoveryRequest::set_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
}
inline std::string* ServiceDiscoveryRequest::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
  return _s;
}
inline const std::string& ServiceDiscoveryRequest::_internal_device_name() const {
  return device_name_.Get();
}
inline void ServiceDiscoveryRequest::_internal_set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceDiscoveryRequest::_internal_mutable_device_name() {
  _has_bits_[0] |= 0x00000001u;
  return device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceDiscoveryRequest::release_device_name() {
  // @@protoc_insertion_point(field_release:aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
  if (!_internal_has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceDiscoveryRequest::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.messages.ServiceDiscoveryRequest.device_name)
}

// required string device_brand = 5;
inline bool ServiceDiscoveryRequest::_internal_has_device_brand() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServiceDiscoveryRequest::has_device_brand() const {
  return _internal_has_device_brand();
}
inline void ServiceDiscoveryRequest::clear_device_brand() {
  device_brand_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServiceDiscoveryRequest::device_brand() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
  return _internal_device_brand();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceDiscoveryRequest::set_device_brand(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 device_brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
}
inline std::string* ServiceDiscoveryRequest::mutable_device_brand() {
  std::string* _s = _internal_mutable_device_brand();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
  return _s;
}
inline const std::string& ServiceDiscoveryRequest::_internal_device_brand() const {
  return device_brand_.Get();
}
inline void ServiceDiscoveryRequest::_internal_set_device_brand(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  device_brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceDiscoveryRequest::_internal_mutable_device_brand() {
  _has_bits_[0] |= 0x00000002u;
  return device_brand_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceDiscoveryRequest::release_device_brand() {
  // @@protoc_insertion_point(field_release:aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
  if (!_internal_has_device_brand()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return device_brand_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceDiscoveryRequest::set_allocated_device_brand(std::string* device_brand) {
  if (device_brand != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_brand_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_brand,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.messages.ServiceDiscoveryRequest.device_brand)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace proto
}  // namespace aasdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServiceDiscoveryRequestMessage_2eproto
