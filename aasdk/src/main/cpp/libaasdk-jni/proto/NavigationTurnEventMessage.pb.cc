// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NavigationTurnEventMessage.proto

#include "NavigationTurnEventMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace messages {
constexpr NavigationTurnEvent::NavigationTurnEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : street_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , turnimage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maneuverdirection_(0)

  , maneuvertype_(0)

  , roundaboutexitnumber_(0u)
  , roundaboutexitangle_(0u){}
struct NavigationTurnEventDefaultTypeInternal {
  constexpr NavigationTurnEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NavigationTurnEventDefaultTypeInternal() {}
  union {
    NavigationTurnEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NavigationTurnEventDefaultTypeInternal _NavigationTurnEvent_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NavigationTurnEventMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NavigationTurnEventMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NavigationTurnEventMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NavigationTurnEventMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::NavigationTurnEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::NavigationTurnEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::NavigationTurnEvent, street_name_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::NavigationTurnEvent, maneuverdirection_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::NavigationTurnEvent, maneuvertype_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::NavigationTurnEvent, turnimage_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::NavigationTurnEvent, roundaboutexitnumber_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::NavigationTurnEvent, roundaboutexitangle_),
  0,
  2,
  3,
  1,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::aasdk::proto::messages::NavigationTurnEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::messages::_NavigationTurnEvent_default_instance_),
};

const char descriptor_table_protodef_NavigationTurnEventMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n NavigationTurnEventMessage.proto\022\024aasd"
  "k.proto.messages\032\026ManeuverTypeEnum.proto"
  "\032\033ManeuverDirectionEnum.proto\"\372\001\n\023Naviga"
  "tionTurnEvent\022\023\n\013street_name\030\001 \002(\t\022D\n\021ma"
  "neuverDirection\030\002 \002(\0162).aasdk.proto.enum"
  "s.ManeuverDirection.Enum\022:\n\014maneuverType"
  "\030\003 \002(\0162$.aasdk.proto.enums.ManeuverType."
  "Enum\022\021\n\tturnImage\030\004 \002(\014\022\034\n\024roundaboutExi"
  "tNumber\030\005 \002(\r\022\033\n\023roundaboutExitAngle\030\006 \002"
  "(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NavigationTurnEventMessage_2eproto_deps[2] = {
  &::descriptor_table_ManeuverDirectionEnum_2eproto,
  &::descriptor_table_ManeuverTypeEnum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NavigationTurnEventMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NavigationTurnEventMessage_2eproto = {
  false, false, 362, descriptor_table_protodef_NavigationTurnEventMessage_2eproto, "NavigationTurnEventMessage.proto", 
  &descriptor_table_NavigationTurnEventMessage_2eproto_once, descriptor_table_NavigationTurnEventMessage_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_NavigationTurnEventMessage_2eproto::offsets,
  file_level_metadata_NavigationTurnEventMessage_2eproto, file_level_enum_descriptors_NavigationTurnEventMessage_2eproto, file_level_service_descriptors_NavigationTurnEventMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_NavigationTurnEventMessage_2eproto_getter() {
  return &descriptor_table_NavigationTurnEventMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_NavigationTurnEventMessage_2eproto(&descriptor_table_NavigationTurnEventMessage_2eproto);
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class NavigationTurnEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationTurnEvent>()._has_bits_);
  static void set_has_street_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maneuverdirection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_maneuvertype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_turnimage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roundaboutexitnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_roundaboutexitangle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

NavigationTurnEvent::NavigationTurnEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.messages.NavigationTurnEvent)
}
NavigationTurnEvent::NavigationTurnEvent(const NavigationTurnEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  street_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_street_name()) {
    street_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_street_name(), 
      GetArenaForAllocation());
  }
  turnimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_turnimage()) {
    turnimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_turnimage(), 
      GetArenaForAllocation());
  }
  ::memcpy(&maneuverdirection_, &from.maneuverdirection_,
    static_cast<size_t>(reinterpret_cast<char*>(&roundaboutexitangle_) -
    reinterpret_cast<char*>(&maneuverdirection_)) + sizeof(roundaboutexitangle_));
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.messages.NavigationTurnEvent)
}

inline void NavigationTurnEvent::SharedCtor() {
street_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
turnimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&maneuverdirection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roundaboutexitangle_) -
    reinterpret_cast<char*>(&maneuverdirection_)) + sizeof(roundaboutexitangle_));
}

NavigationTurnEvent::~NavigationTurnEvent() {
  // @@protoc_insertion_point(destructor:aasdk.proto.messages.NavigationTurnEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NavigationTurnEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  street_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  turnimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NavigationTurnEvent::ArenaDtor(void* object) {
  NavigationTurnEvent* _this = reinterpret_cast< NavigationTurnEvent* >(object);
  (void)_this;
}
void NavigationTurnEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationTurnEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NavigationTurnEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.messages.NavigationTurnEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      street_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      turnimage_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&maneuverdirection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roundaboutexitangle_) -
        reinterpret_cast<char*>(&maneuverdirection_)) + sizeof(roundaboutexitangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationTurnEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string street_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_street_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aasdk.proto.messages.NavigationTurnEvent.street_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .aasdk.proto.enums.ManeuverDirection.Enum maneuverDirection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aasdk::proto::enums::ManeuverDirection_Enum_IsValid(val))) {
            _internal_set_maneuverdirection(static_cast<::aasdk::proto::enums::ManeuverDirection_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .aasdk.proto.enums.ManeuverType.Enum maneuverType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aasdk::proto::enums::ManeuverType_Enum_IsValid(val))) {
            _internal_set_maneuvertype(static_cast<::aasdk::proto::enums::ManeuverType_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes turnImage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_turnimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 roundaboutExitNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_roundaboutexitnumber(&has_bits);
          roundaboutexitnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 roundaboutExitAngle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_roundaboutexitangle(&has_bits);
          roundaboutexitangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationTurnEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.messages.NavigationTurnEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string street_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_street_name().data(), static_cast<int>(this->_internal_street_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aasdk.proto.messages.NavigationTurnEvent.street_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_street_name(), target);
  }

  // required .aasdk.proto.enums.ManeuverDirection.Enum maneuverDirection = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_maneuverdirection(), target);
  }

  // required .aasdk.proto.enums.ManeuverType.Enum maneuverType = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_maneuvertype(), target);
  }

  // required bytes turnImage = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_turnimage(), target);
  }

  // required uint32 roundaboutExitNumber = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_roundaboutexitnumber(), target);
  }

  // required uint32 roundaboutExitAngle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_roundaboutexitangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.messages.NavigationTurnEvent)
  return target;
}

size_t NavigationTurnEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aasdk.proto.messages.NavigationTurnEvent)
  size_t total_size = 0;

  if (_internal_has_street_name()) {
    // required string street_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_street_name());
  }

  if (_internal_has_turnimage()) {
    // required bytes turnImage = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_turnimage());
  }

  if (_internal_has_maneuverdirection()) {
    // required .aasdk.proto.enums.ManeuverDirection.Enum maneuverDirection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_maneuverdirection());
  }

  if (_internal_has_maneuvertype()) {
    // required .aasdk.proto.enums.ManeuverType.Enum maneuverType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_maneuvertype());
  }

  if (_internal_has_roundaboutexitnumber()) {
    // required uint32 roundaboutExitNumber = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_roundaboutexitnumber());
  }

  if (_internal_has_roundaboutexitangle()) {
    // required uint32 roundaboutExitAngle = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_roundaboutexitangle());
  }

  return total_size;
}
size_t NavigationTurnEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.messages.NavigationTurnEvent)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string street_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_street_name());

    // required bytes turnImage = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_turnimage());

    // required .aasdk.proto.enums.ManeuverDirection.Enum maneuverDirection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_maneuverdirection());

    // required .aasdk.proto.enums.ManeuverType.Enum maneuverType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_maneuvertype());

    // required uint32 roundaboutExitNumber = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_roundaboutexitnumber());

    // required uint32 roundaboutExitAngle = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_roundaboutexitangle());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NavigationTurnEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NavigationTurnEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NavigationTurnEvent::GetClassData() const { return &_class_data_; }

void NavigationTurnEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NavigationTurnEvent *>(to)->MergeFrom(
      static_cast<const NavigationTurnEvent &>(from));
}


void NavigationTurnEvent::MergeFrom(const NavigationTurnEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.messages.NavigationTurnEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_street_name(from._internal_street_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_turnimage(from._internal_turnimage());
    }
    if (cached_has_bits & 0x00000004u) {
      maneuverdirection_ = from.maneuverdirection_;
    }
    if (cached_has_bits & 0x00000008u) {
      maneuvertype_ = from.maneuvertype_;
    }
    if (cached_has_bits & 0x00000010u) {
      roundaboutexitnumber_ = from.roundaboutexitnumber_;
    }
    if (cached_has_bits & 0x00000020u) {
      roundaboutexitangle_ = from.roundaboutexitangle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NavigationTurnEvent::CopyFrom(const NavigationTurnEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.messages.NavigationTurnEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationTurnEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NavigationTurnEvent::InternalSwap(NavigationTurnEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &street_name_, GetArenaForAllocation(),
      &other->street_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &turnimage_, GetArenaForAllocation(),
      &other->turnimage_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationTurnEvent, roundaboutexitangle_)
      + sizeof(NavigationTurnEvent::roundaboutexitangle_)
      - PROTOBUF_FIELD_OFFSET(NavigationTurnEvent, maneuverdirection_)>(
          reinterpret_cast<char*>(&maneuverdirection_),
          reinterpret_cast<char*>(&other->maneuverdirection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationTurnEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NavigationTurnEventMessage_2eproto_getter, &descriptor_table_NavigationTurnEventMessage_2eproto_once,
      file_level_metadata_NavigationTurnEventMessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::messages::NavigationTurnEvent* Arena::CreateMaybeMessage< ::aasdk::proto::messages::NavigationTurnEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::messages::NavigationTurnEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
