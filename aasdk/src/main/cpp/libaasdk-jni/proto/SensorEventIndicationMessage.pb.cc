// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorEventIndicationMessage.proto

#include "SensorEventIndicationMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace messages {
constexpr SensorEventIndication::SensorEventIndication(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gps_location_()
  , compass_()
  , speed_()
  , rpm_()
  , odometer_()
  , fuel_level_()
  , parking_brake_()
  , gear_()
  , diagnostics_()
  , night_mode_()
  , enviorment_()
  , hvac_()
  , driving_status_()
  , steering_wheel_()
  , passenger_()
  , door_()
  , light_()
  , accel_()
  , gyro_(){}
struct SensorEventIndicationDefaultTypeInternal {
  constexpr SensorEventIndicationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorEventIndicationDefaultTypeInternal() {}
  union {
    SensorEventIndication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorEventIndicationDefaultTypeInternal _SensorEventIndication_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SensorEventIndicationMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SensorEventIndicationMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SensorEventIndicationMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SensorEventIndicationMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, gps_location_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, compass_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, speed_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, rpm_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, odometer_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, fuel_level_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, gear_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, diagnostics_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, night_mode_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, enviorment_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, hvac_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, driving_status_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, steering_wheel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, passenger_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, door_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, light_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, accel_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::SensorEventIndication, gyro_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::aasdk::proto::messages::SensorEventIndication)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::messages::_SensorEventIndication_default_instance_),
};

const char descriptor_table_protodef_SensorEventIndicationMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"SensorEventIndicationMessage.proto\022\024aa"
  "sdk.proto.messages\032\025GPSLocationData.prot"
  "o\032\021CompassData.proto\032\017SpeedData.proto\032\rR"
  "PMData.proto\032\022OdometerData.proto\032\023FuelLe"
  "velData.proto\032\026ParkingBrakeData.proto\032\016G"
  "earData.proto\032\025DiagnosticsData.proto\032\023Ni"
  "ghtModeData.proto\032\025EnvironmentData.proto"
  "\032\016HVACData.proto\032\027DrivingStatusData.prot"
  "o\032\027SteeringWheelData.proto\032\023PassengerDat"
  "a.proto\032\016DoorData.proto\032\017LightData.proto"
  "\032\017AccelData.proto\032\016GyroData.proto\"\374\006\n\025Se"
  "nsorEventIndication\0223\n\014gps_location\030\001 \003("
  "\0132\035.aasdk.proto.data.GPSLocation\022*\n\007comp"
  "ass\030\002 \003(\0132\031.aasdk.proto.data.Compass\022&\n\005"
  "speed\030\003 \003(\0132\027.aasdk.proto.data.Speed\022\"\n\003"
  "rpm\030\004 \003(\0132\025.aasdk.proto.data.RPM\022,\n\010odom"
  "eter\030\005 \003(\0132\032.aasdk.proto.data.Odometer\022/"
  "\n\nfuel_level\030\006 \003(\0132\033.aasdk.proto.data.Fu"
  "elLevel\0225\n\rparking_brake\030\007 \003(\0132\036.aasdk.p"
  "roto.data.ParkingBrake\022$\n\004gear\030\010 \003(\0132\026.a"
  "asdk.proto.data.Gear\0222\n\013diagnostics\030\t \003("
  "\0132\035.aasdk.proto.data.Diagnostics\022/\n\nnigh"
  "t_mode\030\n \003(\0132\033.aasdk.proto.data.NightMod"
  "e\0221\n\nenviorment\030\013 \003(\0132\035.aasdk.proto.data"
  ".Environment\022$\n\004hvac\030\014 \003(\0132\026.aasdk.proto"
  ".data.HVAC\0227\n\016driving_status\030\r \003(\0132\037.aas"
  "dk.proto.data.DrivingStatus\0227\n\016steering_"
  "wheel\030\016 \003(\0132\037.aasdk.proto.data.SteeringW"
  "heel\022.\n\tpassenger\030\017 \003(\0132\033.aasdk.proto.da"
  "ta.Passenger\022$\n\004door\030\020 \003(\0132\026.aasdk.proto"
  ".data.Door\022&\n\005light\030\021 \003(\0132\027.aasdk.proto."
  "data.Light\022&\n\005accel\030\023 \003(\0132\027.aasdk.proto."
  "data.Accel\022$\n\004gyro\030\024 \003(\0132\026.aasdk.proto.d"
  "ata.Gyro"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SensorEventIndicationMessage_2eproto_deps[19] = {
  &::descriptor_table_AccelData_2eproto,
  &::descriptor_table_CompassData_2eproto,
  &::descriptor_table_DiagnosticsData_2eproto,
  &::descriptor_table_DoorData_2eproto,
  &::descriptor_table_DrivingStatusData_2eproto,
  &::descriptor_table_EnvironmentData_2eproto,
  &::descriptor_table_FuelLevelData_2eproto,
  &::descriptor_table_GPSLocationData_2eproto,
  &::descriptor_table_GearData_2eproto,
  &::descriptor_table_GyroData_2eproto,
  &::descriptor_table_HVACData_2eproto,
  &::descriptor_table_LightData_2eproto,
  &::descriptor_table_NightModeData_2eproto,
  &::descriptor_table_OdometerData_2eproto,
  &::descriptor_table_ParkingBrakeData_2eproto,
  &::descriptor_table_PassengerData_2eproto,
  &::descriptor_table_RPMData_2eproto,
  &::descriptor_table_SpeedData_2eproto,
  &::descriptor_table_SteeringWheelData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SensorEventIndicationMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SensorEventIndicationMessage_2eproto = {
  false, false, 1328, descriptor_table_protodef_SensorEventIndicationMessage_2eproto, "SensorEventIndicationMessage.proto", 
  &descriptor_table_SensorEventIndicationMessage_2eproto_once, descriptor_table_SensorEventIndicationMessage_2eproto_deps, 19, 1,
  schemas, file_default_instances, TableStruct_SensorEventIndicationMessage_2eproto::offsets,
  file_level_metadata_SensorEventIndicationMessage_2eproto, file_level_enum_descriptors_SensorEventIndicationMessage_2eproto, file_level_service_descriptors_SensorEventIndicationMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_SensorEventIndicationMessage_2eproto_getter() {
  return &descriptor_table_SensorEventIndicationMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_SensorEventIndicationMessage_2eproto(&descriptor_table_SensorEventIndicationMessage_2eproto);
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class SensorEventIndication::_Internal {
 public:
};

void SensorEventIndication::clear_gps_location() {
  gps_location_.Clear();
}
void SensorEventIndication::clear_compass() {
  compass_.Clear();
}
void SensorEventIndication::clear_speed() {
  speed_.Clear();
}
void SensorEventIndication::clear_rpm() {
  rpm_.Clear();
}
void SensorEventIndication::clear_odometer() {
  odometer_.Clear();
}
void SensorEventIndication::clear_fuel_level() {
  fuel_level_.Clear();
}
void SensorEventIndication::clear_parking_brake() {
  parking_brake_.Clear();
}
void SensorEventIndication::clear_gear() {
  gear_.Clear();
}
void SensorEventIndication::clear_diagnostics() {
  diagnostics_.Clear();
}
void SensorEventIndication::clear_night_mode() {
  night_mode_.Clear();
}
void SensorEventIndication::clear_enviorment() {
  enviorment_.Clear();
}
void SensorEventIndication::clear_hvac() {
  hvac_.Clear();
}
void SensorEventIndication::clear_driving_status() {
  driving_status_.Clear();
}
void SensorEventIndication::clear_steering_wheel() {
  steering_wheel_.Clear();
}
void SensorEventIndication::clear_passenger() {
  passenger_.Clear();
}
void SensorEventIndication::clear_door() {
  door_.Clear();
}
void SensorEventIndication::clear_light() {
  light_.Clear();
}
void SensorEventIndication::clear_accel() {
  accel_.Clear();
}
void SensorEventIndication::clear_gyro() {
  gyro_.Clear();
}
SensorEventIndication::SensorEventIndication(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gps_location_(arena),
  compass_(arena),
  speed_(arena),
  rpm_(arena),
  odometer_(arena),
  fuel_level_(arena),
  parking_brake_(arena),
  gear_(arena),
  diagnostics_(arena),
  night_mode_(arena),
  enviorment_(arena),
  hvac_(arena),
  driving_status_(arena),
  steering_wheel_(arena),
  passenger_(arena),
  door_(arena),
  light_(arena),
  accel_(arena),
  gyro_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.messages.SensorEventIndication)
}
SensorEventIndication::SensorEventIndication(const SensorEventIndication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gps_location_(from.gps_location_),
      compass_(from.compass_),
      speed_(from.speed_),
      rpm_(from.rpm_),
      odometer_(from.odometer_),
      fuel_level_(from.fuel_level_),
      parking_brake_(from.parking_brake_),
      gear_(from.gear_),
      diagnostics_(from.diagnostics_),
      night_mode_(from.night_mode_),
      enviorment_(from.enviorment_),
      hvac_(from.hvac_),
      driving_status_(from.driving_status_),
      steering_wheel_(from.steering_wheel_),
      passenger_(from.passenger_),
      door_(from.door_),
      light_(from.light_),
      accel_(from.accel_),
      gyro_(from.gyro_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.messages.SensorEventIndication)
}

void SensorEventIndication::SharedCtor() {
}

SensorEventIndication::~SensorEventIndication() {
  // @@protoc_insertion_point(destructor:aasdk.proto.messages.SensorEventIndication)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorEventIndication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorEventIndication::ArenaDtor(void* object) {
  SensorEventIndication* _this = reinterpret_cast< SensorEventIndication* >(object);
  (void)_this;
}
void SensorEventIndication::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorEventIndication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorEventIndication::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.messages.SensorEventIndication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gps_location_.Clear();
  compass_.Clear();
  speed_.Clear();
  rpm_.Clear();
  odometer_.Clear();
  fuel_level_.Clear();
  parking_brake_.Clear();
  gear_.Clear();
  diagnostics_.Clear();
  night_mode_.Clear();
  enviorment_.Clear();
  hvac_.Clear();
  driving_status_.Clear();
  steering_wheel_.Clear();
  passenger_.Clear();
  door_.Clear();
  light_.Clear();
  accel_.Clear();
  gyro_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorEventIndication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aasdk.proto.data.GPSLocation gps_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gps_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Compass compass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compass(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Speed speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.RPM rpm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rpm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Odometer odometer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_odometer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.FuelLevel fuel_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fuel_level(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.ParkingBrake parking_brake = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parking_brake(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Gear gear = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gear(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Diagnostics diagnostics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnostics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.NightMode night_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_night_mode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Environment enviorment = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enviorment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.HVAC hvac = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hvac(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.DrivingStatus driving_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_driving_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.SteeringWheel steering_wheel = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steering_wheel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Passenger passenger = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passenger(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Door door = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_door(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Light light = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Accel accel = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_accel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .aasdk.proto.data.Gyro gyro = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gyro(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorEventIndication::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.messages.SensorEventIndication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aasdk.proto.data.GPSLocation gps_location = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gps_location_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gps_location(i), target, stream);
  }

  // repeated .aasdk.proto.data.Compass compass = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compass_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_compass(i), target, stream);
  }

  // repeated .aasdk.proto.data.Speed speed = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_speed(i), target, stream);
  }

  // repeated .aasdk.proto.data.RPM rpm = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rpm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rpm(i), target, stream);
  }

  // repeated .aasdk.proto.data.Odometer odometer = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_odometer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_odometer(i), target, stream);
  }

  // repeated .aasdk.proto.data.FuelLevel fuel_level = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fuel_level_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_fuel_level(i), target, stream);
  }

  // repeated .aasdk.proto.data.ParkingBrake parking_brake = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parking_brake_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_parking_brake(i), target, stream);
  }

  // repeated .aasdk.proto.data.Gear gear = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gear_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_gear(i), target, stream);
  }

  // repeated .aasdk.proto.data.Diagnostics diagnostics = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnostics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_diagnostics(i), target, stream);
  }

  // repeated .aasdk.proto.data.NightMode night_mode = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_night_mode_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_night_mode(i), target, stream);
  }

  // repeated .aasdk.proto.data.Environment enviorment = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enviorment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_enviorment(i), target, stream);
  }

  // repeated .aasdk.proto.data.HVAC hvac = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hvac_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_hvac(i), target, stream);
  }

  // repeated .aasdk.proto.data.DrivingStatus driving_status = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_driving_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_driving_status(i), target, stream);
  }

  // repeated .aasdk.proto.data.SteeringWheel steering_wheel = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steering_wheel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_steering_wheel(i), target, stream);
  }

  // repeated .aasdk.proto.data.Passenger passenger = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_passenger_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_passenger(i), target, stream);
  }

  // repeated .aasdk.proto.data.Door door = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_door_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_door(i), target, stream);
  }

  // repeated .aasdk.proto.data.Light light = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_light_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_light(i), target, stream);
  }

  // repeated .aasdk.proto.data.Accel accel = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_accel(i), target, stream);
  }

  // repeated .aasdk.proto.data.Gyro gyro = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gyro_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_gyro(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.messages.SensorEventIndication)
  return target;
}

size_t SensorEventIndication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.messages.SensorEventIndication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aasdk.proto.data.GPSLocation gps_location = 1;
  total_size += 1UL * this->_internal_gps_location_size();
  for (const auto& msg : this->gps_location_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Compass compass = 2;
  total_size += 1UL * this->_internal_compass_size();
  for (const auto& msg : this->compass_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Speed speed = 3;
  total_size += 1UL * this->_internal_speed_size();
  for (const auto& msg : this->speed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.RPM rpm = 4;
  total_size += 1UL * this->_internal_rpm_size();
  for (const auto& msg : this->rpm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Odometer odometer = 5;
  total_size += 1UL * this->_internal_odometer_size();
  for (const auto& msg : this->odometer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.FuelLevel fuel_level = 6;
  total_size += 1UL * this->_internal_fuel_level_size();
  for (const auto& msg : this->fuel_level_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.ParkingBrake parking_brake = 7;
  total_size += 1UL * this->_internal_parking_brake_size();
  for (const auto& msg : this->parking_brake_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Gear gear = 8;
  total_size += 1UL * this->_internal_gear_size();
  for (const auto& msg : this->gear_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Diagnostics diagnostics = 9;
  total_size += 1UL * this->_internal_diagnostics_size();
  for (const auto& msg : this->diagnostics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.NightMode night_mode = 10;
  total_size += 1UL * this->_internal_night_mode_size();
  for (const auto& msg : this->night_mode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Environment enviorment = 11;
  total_size += 1UL * this->_internal_enviorment_size();
  for (const auto& msg : this->enviorment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.HVAC hvac = 12;
  total_size += 1UL * this->_internal_hvac_size();
  for (const auto& msg : this->hvac_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.DrivingStatus driving_status = 13;
  total_size += 1UL * this->_internal_driving_status_size();
  for (const auto& msg : this->driving_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.SteeringWheel steering_wheel = 14;
  total_size += 1UL * this->_internal_steering_wheel_size();
  for (const auto& msg : this->steering_wheel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Passenger passenger = 15;
  total_size += 1UL * this->_internal_passenger_size();
  for (const auto& msg : this->passenger_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Door door = 16;
  total_size += 2UL * this->_internal_door_size();
  for (const auto& msg : this->door_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Light light = 17;
  total_size += 2UL * this->_internal_light_size();
  for (const auto& msg : this->light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Accel accel = 19;
  total_size += 2UL * this->_internal_accel_size();
  for (const auto& msg : this->accel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .aasdk.proto.data.Gyro gyro = 20;
  total_size += 2UL * this->_internal_gyro_size();
  for (const auto& msg : this->gyro_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEventIndication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aasdk.proto.messages.SensorEventIndication)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorEventIndication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorEventIndication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aasdk.proto.messages.SensorEventIndication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aasdk.proto.messages.SensorEventIndication)
    MergeFrom(*source);
  }
}

void SensorEventIndication::MergeFrom(const SensorEventIndication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.messages.SensorEventIndication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gps_location_.MergeFrom(from.gps_location_);
  compass_.MergeFrom(from.compass_);
  speed_.MergeFrom(from.speed_);
  rpm_.MergeFrom(from.rpm_);
  odometer_.MergeFrom(from.odometer_);
  fuel_level_.MergeFrom(from.fuel_level_);
  parking_brake_.MergeFrom(from.parking_brake_);
  gear_.MergeFrom(from.gear_);
  diagnostics_.MergeFrom(from.diagnostics_);
  night_mode_.MergeFrom(from.night_mode_);
  enviorment_.MergeFrom(from.enviorment_);
  hvac_.MergeFrom(from.hvac_);
  driving_status_.MergeFrom(from.driving_status_);
  steering_wheel_.MergeFrom(from.steering_wheel_);
  passenger_.MergeFrom(from.passenger_);
  door_.MergeFrom(from.door_);
  light_.MergeFrom(from.light_);
  accel_.MergeFrom(from.accel_);
  gyro_.MergeFrom(from.gyro_);
}

void SensorEventIndication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aasdk.proto.messages.SensorEventIndication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorEventIndication::CopyFrom(const SensorEventIndication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.messages.SensorEventIndication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEventIndication::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(gps_location_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(compass_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(speed_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rpm_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(odometer_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fuel_level_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(parking_brake_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(gear_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(diagnostics_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(night_mode_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(enviorment_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(hvac_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(driving_status_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(steering_wheel_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(passenger_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(door_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(light_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(accel_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(gyro_)) return false;
  return true;
}

void SensorEventIndication::InternalSwap(SensorEventIndication* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gps_location_.InternalSwap(&other->gps_location_);
  compass_.InternalSwap(&other->compass_);
  speed_.InternalSwap(&other->speed_);
  rpm_.InternalSwap(&other->rpm_);
  odometer_.InternalSwap(&other->odometer_);
  fuel_level_.InternalSwap(&other->fuel_level_);
  parking_brake_.InternalSwap(&other->parking_brake_);
  gear_.InternalSwap(&other->gear_);
  diagnostics_.InternalSwap(&other->diagnostics_);
  night_mode_.InternalSwap(&other->night_mode_);
  enviorment_.InternalSwap(&other->enviorment_);
  hvac_.InternalSwap(&other->hvac_);
  driving_status_.InternalSwap(&other->driving_status_);
  steering_wheel_.InternalSwap(&other->steering_wheel_);
  passenger_.InternalSwap(&other->passenger_);
  door_.InternalSwap(&other->door_);
  light_.InternalSwap(&other->light_);
  accel_.InternalSwap(&other->accel_);
  gyro_.InternalSwap(&other->gyro_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorEventIndication::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SensorEventIndicationMessage_2eproto_getter, &descriptor_table_SensorEventIndicationMessage_2eproto_once,
      file_level_metadata_SensorEventIndicationMessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::messages::SensorEventIndication* Arena::CreateMaybeMessage< ::aasdk::proto::messages::SensorEventIndication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::messages::SensorEventIndication >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
