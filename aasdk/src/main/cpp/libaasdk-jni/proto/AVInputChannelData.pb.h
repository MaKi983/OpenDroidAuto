// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AVInputChannelData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AVInputChannelData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AVInputChannelData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "AVStreamTypeEnum.pb.h"
#include "AudioConfigData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AVInputChannelData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AVInputChannelData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AVInputChannelData_2eproto;
namespace aasdk {
namespace proto {
namespace data {
class AVInputChannel;
struct AVInputChannelDefaultTypeInternal;
extern AVInputChannelDefaultTypeInternal _AVInputChannel_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> ::aasdk::proto::data::AVInputChannel* Arena::CreateMaybeMessage<::aasdk::proto::data::AVInputChannel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class AVInputChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aasdk.proto.data.AVInputChannel) */ {
 public:
  inline AVInputChannel() : AVInputChannel(nullptr) {}
  ~AVInputChannel() override;
  explicit constexpr AVInputChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AVInputChannel(const AVInputChannel& from);
  AVInputChannel(AVInputChannel&& from) noexcept
    : AVInputChannel() {
    *this = ::std::move(from);
  }

  inline AVInputChannel& operator=(const AVInputChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AVInputChannel& operator=(AVInputChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AVInputChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const AVInputChannel* internal_default_instance() {
    return reinterpret_cast<const AVInputChannel*>(
               &_AVInputChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AVInputChannel& a, AVInputChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(AVInputChannel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AVInputChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AVInputChannel* New() const final {
    return new AVInputChannel();
  }

  AVInputChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AVInputChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AVInputChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AVInputChannel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AVInputChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aasdk.proto.data.AVInputChannel";
  }
  protected:
  explicit AVInputChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioConfigFieldNumber = 2,
    kStreamTypeFieldNumber = 1,
    kAvailableWhileInCallFieldNumber = 3,
  };
  // required .aasdk.proto.data.AudioConfig audio_config = 2;
  bool has_audio_config() const;
  private:
  bool _internal_has_audio_config() const;
  public:
  void clear_audio_config();
  const ::aasdk::proto::data::AudioConfig& audio_config() const;
  PROTOBUF_MUST_USE_RESULT ::aasdk::proto::data::AudioConfig* release_audio_config();
  ::aasdk::proto::data::AudioConfig* mutable_audio_config();
  void set_allocated_audio_config(::aasdk::proto::data::AudioConfig* audio_config);
  private:
  const ::aasdk::proto::data::AudioConfig& _internal_audio_config() const;
  ::aasdk::proto::data::AudioConfig* _internal_mutable_audio_config();
  public:
  void unsafe_arena_set_allocated_audio_config(
      ::aasdk::proto::data::AudioConfig* audio_config);
  ::aasdk::proto::data::AudioConfig* unsafe_arena_release_audio_config();

  // required .aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
  bool has_stream_type() const;
  private:
  bool _internal_has_stream_type() const;
  public:
  void clear_stream_type();
  ::aasdk::proto::enums::AVStreamType_Enum stream_type() const;
  void set_stream_type(::aasdk::proto::enums::AVStreamType_Enum value);
  private:
  ::aasdk::proto::enums::AVStreamType_Enum _internal_stream_type() const;
  void _internal_set_stream_type(::aasdk::proto::enums::AVStreamType_Enum value);
  public:

  // optional bool available_while_in_call = 3;
  bool has_available_while_in_call() const;
  private:
  bool _internal_has_available_while_in_call() const;
  public:
  void clear_available_while_in_call();
  bool available_while_in_call() const;
  void set_available_while_in_call(bool value);
  private:
  bool _internal_available_while_in_call() const;
  void _internal_set_available_while_in_call(bool value);
  public:

  // @@protoc_insertion_point(class_scope:aasdk.proto.data.AVInputChannel)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::aasdk::proto::data::AudioConfig* audio_config_;
  int stream_type_;
  bool available_while_in_call_;
  friend struct ::TableStruct_AVInputChannelData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AVInputChannel

// required .aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
inline bool AVInputChannel::_internal_has_stream_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AVInputChannel::has_stream_type() const {
  return _internal_has_stream_type();
}
inline void AVInputChannel::clear_stream_type() {
  stream_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::aasdk::proto::enums::AVStreamType_Enum AVInputChannel::_internal_stream_type() const {
  return static_cast< ::aasdk::proto::enums::AVStreamType_Enum >(stream_type_);
}
inline ::aasdk::proto::enums::AVStreamType_Enum AVInputChannel::stream_type() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.AVInputChannel.stream_type)
  return _internal_stream_type();
}
inline void AVInputChannel::_internal_set_stream_type(::aasdk::proto::enums::AVStreamType_Enum value) {
  assert(::aasdk::proto::enums::AVStreamType_Enum_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  stream_type_ = value;
}
inline void AVInputChannel::set_stream_type(::aasdk::proto::enums::AVStreamType_Enum value) {
  _internal_set_stream_type(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.data.AVInputChannel.stream_type)
}

// required .aasdk.proto.data.AudioConfig audio_config = 2;
inline bool AVInputChannel::_internal_has_audio_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || audio_config_ != nullptr);
  return value;
}
inline bool AVInputChannel::has_audio_config() const {
  return _internal_has_audio_config();
}
inline const ::aasdk::proto::data::AudioConfig& AVInputChannel::_internal_audio_config() const {
  const ::aasdk::proto::data::AudioConfig* p = audio_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::aasdk::proto::data::AudioConfig&>(
      ::aasdk::proto::data::_AudioConfig_default_instance_);
}
inline const ::aasdk::proto::data::AudioConfig& AVInputChannel::audio_config() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.AVInputChannel.audio_config)
  return _internal_audio_config();
}
inline void AVInputChannel::unsafe_arena_set_allocated_audio_config(
    ::aasdk::proto::data::AudioConfig* audio_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_config_);
  }
  audio_config_ = audio_config;
  if (audio_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aasdk.proto.data.AVInputChannel.audio_config)
}
inline ::aasdk::proto::data::AudioConfig* AVInputChannel::release_audio_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::aasdk::proto::data::AudioConfig* temp = audio_config_;
  audio_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aasdk::proto::data::AudioConfig* AVInputChannel::unsafe_arena_release_audio_config() {
  // @@protoc_insertion_point(field_release:aasdk.proto.data.AVInputChannel.audio_config)
  _has_bits_[0] &= ~0x00000001u;
  ::aasdk::proto::data::AudioConfig* temp = audio_config_;
  audio_config_ = nullptr;
  return temp;
}
inline ::aasdk::proto::data::AudioConfig* AVInputChannel::_internal_mutable_audio_config() {
  _has_bits_[0] |= 0x00000001u;
  if (audio_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::aasdk::proto::data::AudioConfig>(GetArenaForAllocation());
    audio_config_ = p;
  }
  return audio_config_;
}
inline ::aasdk::proto::data::AudioConfig* AVInputChannel::mutable_audio_config() {
  ::aasdk::proto::data::AudioConfig* _msg = _internal_mutable_audio_config();
  // @@protoc_insertion_point(field_mutable:aasdk.proto.data.AVInputChannel.audio_config)
  return _msg;
}
inline void AVInputChannel::set_allocated_audio_config(::aasdk::proto::data::AudioConfig* audio_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_config_);
  }
  if (audio_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_config));
    if (message_arena != submessage_arena) {
      audio_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  audio_config_ = audio_config;
  // @@protoc_insertion_point(field_set_allocated:aasdk.proto.data.AVInputChannel.audio_config)
}

// optional bool available_while_in_call = 3;
inline bool AVInputChannel::_internal_has_available_while_in_call() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AVInputChannel::has_available_while_in_call() const {
  return _internal_has_available_while_in_call();
}
inline void AVInputChannel::clear_available_while_in_call() {
  available_while_in_call_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AVInputChannel::_internal_available_while_in_call() const {
  return available_while_in_call_;
}
inline bool AVInputChannel::available_while_in_call() const {
  // @@protoc_insertion_point(field_get:aasdk.proto.data.AVInputChannel.available_while_in_call)
  return _internal_available_while_in_call();
}
inline void AVInputChannel::_internal_set_available_while_in_call(bool value) {
  _has_bits_[0] |= 0x00000004u;
  available_while_in_call_ = value;
}
inline void AVInputChannel::set_available_while_in_call(bool value) {
  _internal_set_available_while_in_call(value);
  // @@protoc_insertion_point(field_set:aasdk.proto.data.AVInputChannel.available_while_in_call)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace aasdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AVInputChannelData_2eproto
