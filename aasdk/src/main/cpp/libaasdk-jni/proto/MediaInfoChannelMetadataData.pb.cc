// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MediaInfoChannelMetadataData.proto

#include "MediaInfoChannelMetadataData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace messages {
constexpr MediaInfoChannelMetadataData::MediaInfoChannelMetadataData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : track_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , artist_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , album_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , album_art_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , track_length_(0)
  , unknown1_(0){}
struct MediaInfoChannelMetadataDataDefaultTypeInternal {
  constexpr MediaInfoChannelMetadataDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaInfoChannelMetadataDataDefaultTypeInternal() {}
  union {
    MediaInfoChannelMetadataData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaInfoChannelMetadataDataDefaultTypeInternal _MediaInfoChannelMetadataData_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MediaInfoChannelMetadataData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MediaInfoChannelMetadataData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MediaInfoChannelMetadataData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MediaInfoChannelMetadataData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelMetadataData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelMetadataData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelMetadataData, track_name_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelMetadataData, artist_name_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelMetadataData, album_name_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelMetadataData, album_art_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelMetadataData, track_length_),
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::messages::MediaInfoChannelMetadataData, unknown1_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::aasdk::proto::messages::MediaInfoChannelMetadataData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::messages::_MediaInfoChannelMetadataData_default_instance_),
};

const char descriptor_table_protodef_MediaInfoChannelMetadataData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"MediaInfoChannelMetadataData.proto\022\024aa"
  "sdk.proto.messages\"\226\001\n\034MediaInfoChannelM"
  "etadataData\022\022\n\ntrack_name\030\001 \001(\t\022\023\n\013artis"
  "t_name\030\002 \001(\t\022\022\n\nalbum_name\030\003 \001(\t\022\021\n\talbu"
  "m_art\030\004 \001(\014\022\024\n\014track_length\030\006 \002(\005\022\020\n\010unk"
  "nown1\030\007 \002(\005"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MediaInfoChannelMetadataData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MediaInfoChannelMetadataData_2eproto = {
  false, false, 211, descriptor_table_protodef_MediaInfoChannelMetadataData_2eproto, "MediaInfoChannelMetadataData.proto", 
  &descriptor_table_MediaInfoChannelMetadataData_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_MediaInfoChannelMetadataData_2eproto::offsets,
  file_level_metadata_MediaInfoChannelMetadataData_2eproto, file_level_enum_descriptors_MediaInfoChannelMetadataData_2eproto, file_level_service_descriptors_MediaInfoChannelMetadataData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_MediaInfoChannelMetadataData_2eproto_getter() {
  return &descriptor_table_MediaInfoChannelMetadataData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_MediaInfoChannelMetadataData_2eproto(&descriptor_table_MediaInfoChannelMetadataData_2eproto);
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class MediaInfoChannelMetadataData::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfoChannelMetadataData>()._has_bits_);
  static void set_has_track_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_artist_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_album_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_album_art(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_track_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unknown1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000030) ^ 0x00000030) != 0;
  }
};

MediaInfoChannelMetadataData::MediaInfoChannelMetadataData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.messages.MediaInfoChannelMetadataData)
}
MediaInfoChannelMetadataData::MediaInfoChannelMetadataData(const MediaInfoChannelMetadataData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  track_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_track_name()) {
    track_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_track_name(), 
      GetArenaForAllocation());
  }
  artist_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_artist_name()) {
    artist_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_artist_name(), 
      GetArenaForAllocation());
  }
  album_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_album_name()) {
    album_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_album_name(), 
      GetArenaForAllocation());
  }
  album_art_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_album_art()) {
    album_art_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_album_art(), 
      GetArenaForAllocation());
  }
  ::memcpy(&track_length_, &from.track_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown1_) -
    reinterpret_cast<char*>(&track_length_)) + sizeof(unknown1_));
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.messages.MediaInfoChannelMetadataData)
}

inline void MediaInfoChannelMetadataData::SharedCtor() {
track_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
artist_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
album_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
album_art_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&track_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unknown1_) -
    reinterpret_cast<char*>(&track_length_)) + sizeof(unknown1_));
}

MediaInfoChannelMetadataData::~MediaInfoChannelMetadataData() {
  // @@protoc_insertion_point(destructor:aasdk.proto.messages.MediaInfoChannelMetadataData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MediaInfoChannelMetadataData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  track_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  artist_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  album_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  album_art_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MediaInfoChannelMetadataData::ArenaDtor(void* object) {
  MediaInfoChannelMetadataData* _this = reinterpret_cast< MediaInfoChannelMetadataData* >(object);
  (void)_this;
}
void MediaInfoChannelMetadataData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaInfoChannelMetadataData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaInfoChannelMetadataData::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.messages.MediaInfoChannelMetadataData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      track_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      artist_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      album_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      album_art_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&track_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unknown1_) -
        reinterpret_cast<char*>(&track_length_)) + sizeof(unknown1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaInfoChannelMetadataData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string track_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_track_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aasdk.proto.messages.MediaInfoChannelMetadataData.track_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string artist_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_artist_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aasdk.proto.messages.MediaInfoChannelMetadataData.artist_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string album_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_album_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aasdk.proto.messages.MediaInfoChannelMetadataData.album_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes album_art = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_album_art();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 track_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_track_length(&has_bits);
          track_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 unknown1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_unknown1(&has_bits);
          unknown1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaInfoChannelMetadataData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.messages.MediaInfoChannelMetadataData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string track_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_name().data(), static_cast<int>(this->_internal_track_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aasdk.proto.messages.MediaInfoChannelMetadataData.track_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_name(), target);
  }

  // optional string artist_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_artist_name().data(), static_cast<int>(this->_internal_artist_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aasdk.proto.messages.MediaInfoChannelMetadataData.artist_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_artist_name(), target);
  }

  // optional string album_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_album_name().data(), static_cast<int>(this->_internal_album_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aasdk.proto.messages.MediaInfoChannelMetadataData.album_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_album_name(), target);
  }

  // optional bytes album_art = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_album_art(), target);
  }

  // required int32 track_length = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_track_length(), target);
  }

  // required int32 unknown1 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_unknown1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.messages.MediaInfoChannelMetadataData)
  return target;
}

size_t MediaInfoChannelMetadataData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aasdk.proto.messages.MediaInfoChannelMetadataData)
  size_t total_size = 0;

  if (_internal_has_track_length()) {
    // required int32 track_length = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_track_length());
  }

  if (_internal_has_unknown1()) {
    // required int32 unknown1 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown1());
  }

  return total_size;
}
size_t MediaInfoChannelMetadataData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.messages.MediaInfoChannelMetadataData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required int32 track_length = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_track_length());

    // required int32 unknown1 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown1());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string track_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_track_name());
    }

    // optional string artist_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_artist_name());
    }

    // optional string album_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_album_name());
    }

    // optional bytes album_art = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_album_art());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaInfoChannelMetadataData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MediaInfoChannelMetadataData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaInfoChannelMetadataData::GetClassData() const { return &_class_data_; }

void MediaInfoChannelMetadataData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MediaInfoChannelMetadataData *>(to)->MergeFrom(
      static_cast<const MediaInfoChannelMetadataData &>(from));
}


void MediaInfoChannelMetadataData::MergeFrom(const MediaInfoChannelMetadataData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.messages.MediaInfoChannelMetadataData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_track_name(from._internal_track_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_artist_name(from._internal_artist_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_album_name(from._internal_album_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_album_art(from._internal_album_art());
    }
    if (cached_has_bits & 0x00000010u) {
      track_length_ = from.track_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      unknown1_ = from.unknown1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfoChannelMetadataData::CopyFrom(const MediaInfoChannelMetadataData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.messages.MediaInfoChannelMetadataData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaInfoChannelMetadataData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MediaInfoChannelMetadataData::InternalSwap(MediaInfoChannelMetadataData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &track_name_, GetArenaForAllocation(),
      &other->track_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &artist_name_, GetArenaForAllocation(),
      &other->artist_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &album_name_, GetArenaForAllocation(),
      &other->album_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &album_art_, GetArenaForAllocation(),
      &other->album_art_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaInfoChannelMetadataData, unknown1_)
      + sizeof(MediaInfoChannelMetadataData::unknown1_)
      - PROTOBUF_FIELD_OFFSET(MediaInfoChannelMetadataData, track_length_)>(
          reinterpret_cast<char*>(&track_length_),
          reinterpret_cast<char*>(&other->track_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaInfoChannelMetadataData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_MediaInfoChannelMetadataData_2eproto_getter, &descriptor_table_MediaInfoChannelMetadataData_2eproto_once,
      file_level_metadata_MediaInfoChannelMetadataData_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::messages::MediaInfoChannelMetadataData* Arena::CreateMaybeMessage< ::aasdk::proto::messages::MediaInfoChannelMetadataData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::messages::MediaInfoChannelMetadataData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
