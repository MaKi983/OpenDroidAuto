// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlMessageIdsEnum.proto

#include "ControlMessageIdsEnum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace aasdk {
namespace proto {
namespace ids {
constexpr ControlMessage::ControlMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ControlMessageDefaultTypeInternal {
  constexpr ControlMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlMessageDefaultTypeInternal() {}
  union {
    ControlMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
}  // namespace ids
}  // namespace proto
}  // namespace aasdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ControlMessageIdsEnum_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ControlMessageIdsEnum_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ControlMessageIdsEnum_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ControlMessageIdsEnum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aasdk::proto::ids::ControlMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::aasdk::proto::ids::ControlMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aasdk::proto::ids::_ControlMessage_default_instance_),
};

const char descriptor_table_protodef_ControlMessageIdsEnum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033ControlMessageIdsEnum.proto\022\017aasdk.pro"
  "to.ids\"\305\003\n\016ControlMessage\"\262\003\n\004Enum\022\010\n\004NO"
  "NE\020\000\022\023\n\017VERSION_REQUEST\020\001\022\024\n\020VERSION_RES"
  "PONSE\020\002\022\021\n\rSSL_HANDSHAKE\020\003\022\021\n\rAUTH_COMPL"
  "ETE\020\004\022\035\n\031SERVICE_DISCOVERY_REQUEST\020\005\022\036\n\032"
  "SERVICE_DISCOVERY_RESPONSE\020\006\022\030\n\024CHANNEL_"
  "OPEN_REQUEST\020\007\022\031\n\025CHANNEL_OPEN_RESPONSE\020"
  "\010\022\020\n\014PING_REQUEST\020\013\022\021\n\rPING_RESPONSE\020\014\022\034"
  "\n\030NAVIGATION_FOCUS_REQUEST\020\r\022\035\n\031NAVIGATI"
  "ON_FOCUS_RESPONSE\020\016\022\024\n\020SHUTDOWN_REQUEST\020"
  "\017\022\025\n\021SHUTDOWN_RESPONSE\020\020\022\031\n\025VOICE_SESSIO"
  "N_REQUEST\020\021\022\027\n\023AUDIO_FOCUS_REQUEST\020\022\022\030\n\024"
  "AUDIO_FOCUS_RESPONSE\020\023"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ControlMessageIdsEnum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ControlMessageIdsEnum_2eproto = {
  false, false, 502, descriptor_table_protodef_ControlMessageIdsEnum_2eproto, "ControlMessageIdsEnum.proto", 
  &descriptor_table_ControlMessageIdsEnum_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_ControlMessageIdsEnum_2eproto::offsets,
  file_level_metadata_ControlMessageIdsEnum_2eproto, file_level_enum_descriptors_ControlMessageIdsEnum_2eproto, file_level_service_descriptors_ControlMessageIdsEnum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ControlMessageIdsEnum_2eproto_getter() {
  return &descriptor_table_ControlMessageIdsEnum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ControlMessageIdsEnum_2eproto(&descriptor_table_ControlMessageIdsEnum_2eproto);
namespace aasdk {
namespace proto {
namespace ids {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMessage_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ControlMessageIdsEnum_2eproto);
  return file_level_enum_descriptors_ControlMessageIdsEnum_2eproto[0];
}
bool ControlMessage_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ControlMessage_Enum ControlMessage::NONE;
constexpr ControlMessage_Enum ControlMessage::VERSION_REQUEST;
constexpr ControlMessage_Enum ControlMessage::VERSION_RESPONSE;
constexpr ControlMessage_Enum ControlMessage::SSL_HANDSHAKE;
constexpr ControlMessage_Enum ControlMessage::AUTH_COMPLETE;
constexpr ControlMessage_Enum ControlMessage::SERVICE_DISCOVERY_REQUEST;
constexpr ControlMessage_Enum ControlMessage::SERVICE_DISCOVERY_RESPONSE;
constexpr ControlMessage_Enum ControlMessage::CHANNEL_OPEN_REQUEST;
constexpr ControlMessage_Enum ControlMessage::CHANNEL_OPEN_RESPONSE;
constexpr ControlMessage_Enum ControlMessage::PING_REQUEST;
constexpr ControlMessage_Enum ControlMessage::PING_RESPONSE;
constexpr ControlMessage_Enum ControlMessage::NAVIGATION_FOCUS_REQUEST;
constexpr ControlMessage_Enum ControlMessage::NAVIGATION_FOCUS_RESPONSE;
constexpr ControlMessage_Enum ControlMessage::SHUTDOWN_REQUEST;
constexpr ControlMessage_Enum ControlMessage::SHUTDOWN_RESPONSE;
constexpr ControlMessage_Enum ControlMessage::VOICE_SESSION_REQUEST;
constexpr ControlMessage_Enum ControlMessage::AUDIO_FOCUS_REQUEST;
constexpr ControlMessage_Enum ControlMessage::AUDIO_FOCUS_RESPONSE;
constexpr ControlMessage_Enum ControlMessage::Enum_MIN;
constexpr ControlMessage_Enum ControlMessage::Enum_MAX;
constexpr int ControlMessage::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ControlMessage::_Internal {
 public:
};

ControlMessage::ControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:aasdk.proto.ids.ControlMessage)
}
ControlMessage::ControlMessage(const ControlMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aasdk.proto.ids.ControlMessage)
}

inline void ControlMessage::SharedCtor() {
}

ControlMessage::~ControlMessage() {
  // @@protoc_insertion_point(destructor:aasdk.proto.ids.ControlMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlMessage::ArenaDtor(void* object) {
  ControlMessage* _this = reinterpret_cast< ControlMessage* >(object);
  (void)_this;
}
void ControlMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:aasdk.proto.ids.ControlMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aasdk.proto.ids.ControlMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aasdk.proto.ids.ControlMessage)
  return target;
}

size_t ControlMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aasdk.proto.ids.ControlMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMessage::GetClassData() const { return &_class_data_; }

void ControlMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ControlMessage *>(to)->MergeFrom(
      static_cast<const ControlMessage &>(from));
}


void ControlMessage::MergeFrom(const ControlMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aasdk.proto.ids.ControlMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMessage::CopyFrom(const ControlMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aasdk.proto.ids.ControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage::IsInitialized() const {
  return true;
}

void ControlMessage::InternalSwap(ControlMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ControlMessageIdsEnum_2eproto_getter, &descriptor_table_ControlMessageIdsEnum_2eproto_once,
      file_level_metadata_ControlMessageIdsEnum_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ids
}  // namespace proto
}  // namespace aasdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aasdk::proto::ids::ControlMessage* Arena::CreateMaybeMessage< ::aasdk::proto::ids::ControlMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aasdk::proto::ids::ControlMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
